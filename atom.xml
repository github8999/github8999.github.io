<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>生命1昊</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-14T09:15:14.702Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>_日天昊</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构绪论(待改进)</title>
    <link href="http://yoursite.com/2019/04/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA-%E5%BE%85%E6%94%B9%E8%BF%9B/"/>
    <id>http://yoursite.com/2019/04/14/数据结构绪论-待改进/</id>
    <published>2019-04-14T09:11:19.000Z</published>
    <updated>2019-04-14T09:15:14.702Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="什么是数据结构"><a href="#什么是数据结构" class="headerlink" title="什么是数据结构"></a>什么是数据结构</h2><blockquote><p>程序 = 算法 + 数据结构<br>程序设计的实质,就是对 确定的问题 选择 一种好的结构 加上 一种好的算法。<br>数据结构是算法实现的基础, 算法总是要依赖于某种数据结构来实现</p></blockquote><h3 id="数据结构概述"><a href="#数据结构概述" class="headerlink" title="数据结构概述"></a>数据结构概述</h3><blockquote><p>1946年情人节，世界上第一台电脑ENIAC在美国宾夕法尼亚大学诞生<br>当时是用来进行计算弹道的, 当时计算机的研制主要用于数值计算。<br>发展到现在,计算机处理的数据也由纯粹的数值,发展到 字符, 表格, 图形, 图像, 声音等非数值的数据。</p></blockquote><h3 id="三种基本数据逻辑结构"><a href="#三种基本数据逻辑结构" class="headerlink" title="三种基本数据逻辑结构"></a>三种基本数据逻辑结构</h3><ul><li><p>线性结构: 一对一</p></li><li><p>树形结构: 一对多</p></li><li><p>图形结构: 多对多</p></li></ul><h2 id="算法概念"><a href="#算法概念" class="headerlink" title="算法概念"></a>算法概念</h2><blockquote><p>算法简单来说就是解决问题的方法。在计算机领域我们可以说算法是有限的指令序列。</p></blockquote><blockquote><p>算法的含义与程序十分相似, 但又有区别。程序中的指令必须是机器可执行的, 而算法中的指令则无此限制。</p></blockquote><blockquote><p>一个算法如果要程序设计语言来描述, 则它就是一个程序。</p></blockquote><h3 id="算法的特性"><a href="#算法的特性" class="headerlink" title="算法的特性"></a>算法的特性</h3><ul><li><p>0个或多个输入: 绝大多数的算法, 输入参数是必要的, 但是也有个别情况, 比如, 仅仅要求输出一段文字</p></li><li><p>至少有一个输出: 输出就是把结果呈现出来, 问题解决了,结果不呈现。有意义吗?</p></li><li><p>有穷性: 一个算法在执行有限步骤后可以呈现。不然会出现死循环</p></li><li><p>确定性: 算法的每一步都必须有确切的意义, 不会出现二义性</p></li><li><p>可行性: 算法中的每一步都是可行的, 每一步都能通过执行有限的次数完成。(也就是指算法可以转换成程序 在机器上运行 并得到正确的结果)</p></li></ul><h3 id="算法要求"><a href="#算法要求" class="headerlink" title="算法要求"></a>算法要求</h3><blockquote><p>一个好的算法应该具备以下四点要求</p></blockquote><ul><li><p>算法要正确: 算法的执行结果应当满足预先规定的功能和性能要求。</p></li><li><p>可读性: <strong>算法首先应该是便于人们理解和相互交流,其次才是机器可执行</strong>。所以一个算法应该思路清晰,层次分明.简单明了,易读易懂。</p></li><li><p>健壮性: 作为一个好的算法,当输入不合法的数据时, 应该适当的做出正确反应或进行相应的处理, 而不至于产生一些莫名其妙的输出结果。</p></li><li><p>高效率低存储: <strong>算法效率通常指算法的执行时间。</strong> 对于同一个问题如果有多个算法可以解决, 执行时间最短的效率最高。所谓存储量的要求,是指算法在执行过程中所产生的的最大存储空间。这两者都与问题的规模有关。</p></li></ul><h3 id="算法的描述"><a href="#算法的描述" class="headerlink" title="算法的描述"></a>算法的描述</h3><p><img src="/2019/04/14/数据结构绪论-待改进/./数据结构绪论-待改进/算法的描述.jpg" alt="算法的描述"></p><h3 id="算法评价-算法效率的评价方法"><a href="#算法评价-算法效率的评价方法" class="headerlink" title="算法评价(算法效率的评价方法)"></a>算法评价(算法效率的评价方法)</h3><blockquote><p>少花时间, 少用空间<br>常说的算法效率, 大多指执行时间。</p></blockquote><ul><li>利用计算器,统计运行时间,从而确定算法效率的高低。(这种测试方式有很大的缺陷)</li></ul><ol><li><p>首先要使用算法编制好程序时才能测试算法效率,如果程序存在缺陷就会前功尽弃。</p></li><li><p>时间的比较又依赖于计算机的硬件和软件的坏境因素,有时会遮盖算法本身的优劣。</p></li><li><p>算法的测试数据, 算法的高效有时候和数据的规模有关, 效率高的算法在小规模的测试数据面前往往得不到体现。</p></li></ol><ul><li>估算法</li></ul><p><img src="/2019/04/14/数据结构绪论-待改进/./数据结构绪论-待改进/算法效率评价.jpg" alt="算法评价"><br><img src="/2019/04/14/数据结构绪论-待改进/./数据结构绪论-待改进/算法效率评价1.jpg" alt="算法评价"><br><img src="/2019/04/14/数据结构绪论-待改进/./数据结构绪论-待改进/算法效率评价2.jpg" alt="算法评价"><br><img src="/2019/04/14/数据结构绪论-待改进/./数据结构绪论-待改进/算法效率评价3.jpg" alt="算法评价"><br><img src="/2019/04/14/数据结构绪论-待改进/./数据结构绪论-待改进/算法效率评价4.jpg" alt="算法评价"><br><img src="/2019/04/14/数据结构绪论-待改进/./数据结构绪论-待改进/算法效率评价5.jpg" alt="算法评价"><br><img src="/2019/04/14/数据结构绪论-待改进/./数据结构绪论-待改进/算法效率评价6.jpg" alt="算法评价"><br><img src="/2019/04/14/数据结构绪论-待改进/./数据结构绪论-待改进/算法效率评价7.jpg" alt="算法评价"><br><img src="/2019/04/14/数据结构绪论-待改进/./数据结构绪论-待改进/算法效率评价8.jpg" alt="算法评价"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;headerlink&quot; title=&quot;数据结构&quot;&gt;&lt;/a&gt;数据结构&lt;/h1&gt;&lt;h2 id=&quot;什么是数据结构&quot;&gt;&lt;a href=&quot;#什么是数据结构&quot; class=&quot;headerlink&quot; title=&quot;什么是
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法效率评价" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E6%95%88%E7%8E%87%E8%AF%84%E4%BB%B7/"/>
    
  </entry>
  
  <entry>
    <title>vue基础知识</title>
    <link href="http://yoursite.com/2019/04/13/vue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2019/04/13/vue基础知识/</id>
    <published>2019-04-13T14:01:14.000Z</published>
    <updated>2019-04-13T14:01:14.348Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>flex布局</title>
    <link href="http://yoursite.com/2019/04/12/flex%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2019/04/12/flex布局/</id>
    <published>2019-04-12T13:46:23.000Z</published>
    <updated>2019-04-13T13:57:36.594Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flex-布局"><a href="#Flex-布局" class="headerlink" title="Flex 布局"></a>Flex 布局</h1><blockquote><p><strong>网页布局</strong> (layout) 是 CSS 的一个重点应用。布局的传统解决方法, 基于盒状模型(margin,padding…), 依赖display 属性 + position 属性 + float 属性。紧紧是垂直居中就不容易实现。</p></blockquote><blockquote><p><strong>flex布局</strong> Flex布局将成为未来布局的首选方案。</p></blockquote><h2 id="一、什么是Flex布局"><a href="#一、什么是Flex布局" class="headerlink" title="一、什么是Flex布局:"></a>一、什么是Flex布局:</h2><blockquote><p>设为flex布局以后, 子元素的float, clear, vertical-align属性将失效</p></blockquote><p>任何一个容器都可以指定为flex布局<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">    display:flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>行内元素也可以使用Flex布局<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">    display:inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Webkit 内核的浏览器，必须要加上 -webkit 前缀<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">    display: -webkit-flex; /* safari */</span><br><span class="line">    display: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h2><blockquote><p>采用Flex布局的元素, 成为Flex 容器(flex container), 简称 “容器”。它的所有子元素都会自动成为容器成员, 成为Flex 项目(flex item), 简称 “项目”。</p></blockquote><blockquote><p>容器默认存在两根轴：水平方向的轴（main axis）和垂直的交叉轴（cross axis）。主轴开始位置与边框的交叉点叫做 main start，结束为止叫做 main end；交叉轴的开始位置叫做 cross start，结束位置叫做cross end。</p></blockquote><blockquote><p>项目默认沿主轴排列。单个项目占据主轴空间叫做 main size，占据的交叉轴空间叫做cross size。</p></blockquote><p><img src="/2019/04/12/flex布局/容器结构.jpg" alt="容器结构"></p><hr><h2 id="三、容器的属性"><a href="#三、容器的属性" class="headerlink" title="三、容器的属性"></a>三、容器的属性</h2><ul><li><p>flex-direction</p></li><li><p>flex-wrap</p></li><li><p>flex-flow</p></li><li><p>justify-content</p></li><li><p>align-items</p></li><li><p>align-content</p></li></ul><h3 id="3-1-flex-direction-属性"><a href="#3-1-flex-direction-属性" class="headerlink" title="3.1 flex-direction 属性"></a>3.1 flex-direction 属性</h3><p>flex-direction 属性决定主轴的方向(即项目排列的方向)</p><p><img src="/2019/04/12/flex布局/flex-direction属性.jpg" alt="flex-direction属性"></p><p>它可能有四个值:</p><ul><li><p>row(默认值) :主轴位水平方向, 起点在左端</p></li><li><p>row-reverse :主轴在水平方向, 起点在右端</p></li><li><p>column :主轴在垂直方式, 起点在上端</p></li><li><p>column-reverse :主轴在垂直方式, 起点在下端</p></li></ul><h3 id="3-2-flex-wrap"><a href="#3-2-flex-wrap" class="headerlink" title="3.2 flex-wrap"></a>3.2 flex-wrap</h3><p>默认情况下,项目都排在一条线(又称 轴线 )上。 flex-wrap 属性定义, 如果一条线排不下,如何换行。</p><p>它可能取三个值</p><ul><li>nowrap (默认) 不换行: 会挤压盒子的宽高; </li></ul><p><img src="/2019/04/12/flex布局/不换行.jpg" alt="不换行"></p><ul><li>wrap 换行, 多余的往下排</li></ul><p><img src="/2019/04/12/flex布局/wrap.jpg" alt="wrap"></p><ul><li>wrap-reverse 换行, 但是多余的往上排</li></ul><p><img src="/2019/04/12/flex布局/wrap-reverse.jpg" alt="wrap-reverse"></p><h3 id="3-3-flex-flow属性"><a href="#3-3-flex-flow属性" class="headerlink" title="3.3 flex-flow属性"></a>3.3 flex-flow属性</h3><p>flex-flow属性 是对 flex-direction属性 和 flex-wrap属性 的简写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flex-flow: flex-direction || flex-wrap</span><br></pre></td></tr></table></figure></p><h3 id="3-4-justify-content"><a href="#3-4-justify-content" class="headerlink" title="3.4 justify-content"></a>3.4 justify-content</h3><p>justify-content 属性 定义了项目在主轴上的对齐方式</p><ul><li><p>flex-start 从start向end排列, 类似于flex-direction:row;</p></li><li><p>flex-end 从end向start排列, 类似于flex-direction: row-reverse;</p></li><li><p>center 项目居中</p></li><li><p>space-between 两侧紧贴, 项目之间的间隔都相等</p></li><li><p>space-around 项目之间的间隔都相等。所以项目之间的间隔比项目与边框之间的间隔大一倍。</p></li></ul><p><img src="/2019/04/12/flex布局/justify-content.jpg" alt="justify-content.jpg"></p><h3 id="3-5-align-item-属性"><a href="#3-5-align-item-属性" class="headerlink" title="3.5 align-item 属性"></a>3.5 align-item 属性</h3><p>align-item 属性, 定义项目在交叉轴上如何对齐</p><ul><li><p>flex-start, 从交叉轴的start开始向下排列 的start</p></li><li><p>flex-end, 交叉轴的终点对齐。</p></li><li><p>center, 交叉轴的中点对齐</p></li><li><p>baseline, 项目中第一行文字的基线对齐</p></li><li><p>stretch, 如果项目未设置高度或者 auto, 将沾满整个容器的高度。</p></li></ul><h3 id="3-6-align-content属性"><a href="#3-6-align-content属性" class="headerlink" title="3.6 align-content属性"></a>3.6 align-content属性</h3><p>align-content属性定义了主轴方向上多条轴线时, 项目子在交叉轴方向上的对齐方式</p><ul><li><p>flex-start, 从交叉轴的</p></li><li><p>flex-end</p></li><li><p>center</p></li><li><p>space-between</p></li><li><p>space-around</p></li><li><p>stretch</p></li></ul><p><img src="/2019/04/12/flex布局/align-content.png" alt="align-content"></p><hr><h2 id="四、项目属性"><a href="#四、项目属性" class="headerlink" title="四、项目属性"></a>四、项目属性</h2><ul><li><p>order</p></li><li><p>flex-grow</p></li><li><p>flex-shrink</p></li><li><p>flex-basis</p></li><li><p>flex</p></li><li><p>align-self</p></li></ul><h3 id="4-1-order-属性"><a href="#4-1-order-属性" class="headerlink" title="4.1 order 属性"></a>4.1 order 属性</h3><p><code>order</code>属性定义项目的排列顺序。项目越小排列越靠前,默认为0;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例：order: &lt;int&gt;</span><br></pre></td></tr></table></figure></p><p><img src="/2019/04/12/flex布局/order.jpg" alt="order"></p><h3 id="4-2-flex-grow属性"><a href="#4-2-flex-grow属性" class="headerlink" title="4.2 flex-grow属性"></a>4.2 flex-grow属性</h3><blockquote><p>如果所有项目都为1的话, 它们将等分项目空间, 如果有一个项目为2, 其余项目为1的话, 则前者占据剩余空间将比其他项目多一倍。</p></blockquote><p><code>flex-grow</code>属性 定义项目的放大比例, 如果容易中有足够大的空间, 会结合比例进行放大。默认为0 ,即有足够的空间也不放大。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flex-grow:&lt;int&gt;</span><br></pre></td></tr></table></figure><h3 id="4-3-flex-shrink-属性"><a href="#4-3-flex-shrink-属性" class="headerlink" title="4.3 flex-shrink 属性"></a>4.3 flex-shrink 属性</h3><blockquote><p>如果所有项目为1, 当容器空间不足时,都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为0, 其他都为1 ,当容器空间不足, 其他都缩小时, 它不变。</p></blockquote><blockquote><p>负值对该属性无效。</p></blockquote><p><code>flex-shrink</code> 属性定义了项目的缩小比例,默认为1, 如果容器空间不如, 该项目将缩小。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flex-shrink:&lt;int&gt;</span><br></pre></td></tr></table></figure><h3 id="4-4-flex-basis-属性"><a href="#4-4-flex-basis-属性" class="headerlink" title="4.4 flex-basis 属性"></a>4.4 flex-basis 属性</h3><p><code>flex-basis</code>属性定义了在分配多余空间之前, 项目占据主轴空间(main size)。浏览器根据这个属性,计算主轴是否有多余空间。它的默认值为auto, 即项目的本来大小。</p><blockquote><p>该属性如果设置成数值, 将占据固定空间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flex-basis: 数值||auto;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="4-5-flex属性"><a href="#4-5-flex属性" class="headerlink" title="4.5 flex属性"></a>4.5 flex属性</h3><p><code>flex</code> 属性是 <code>flex-grow</code>,<code>flex-shrink</code>,<code>flex-basis</code>的简写, 默认值为<code>0 1 auto</code>。后两个属性可选。 </p><blockquote><p>该属性有两个快捷值, auto ==&gt; ( 1 1 auto ), none ==&gt; ( 0 0 auto )</p></blockquote><blockquote><p>建议有限使用这个属性, 而不是分开使用 <code>flex-grow</code> <code>flex-shrink</code>和 <code>flex-basis</code>, 因为浏览器会推算默认值。</p></blockquote><h3 id="4-6-align-self属性"><a href="#4-6-align-self属性" class="headerlink" title="4.6 align-self属性"></a>4.6 align-self属性</h3><p><code>align-self</code> 属性允许单个项目有与其他项目不同的对齐方式, 可以覆盖<code>align-item</code> 属性。默认值为<code>auto</code>, 表示继承父元素的<code>align-item属性</code>,如果没有,则等同于stretch</p><blockquote><p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p></blockquote><p><img src="/2019/04/12/flex布局/align-self.jpg" alt="align-self"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Flex-布局&quot;&gt;&lt;a href=&quot;#Flex-布局&quot; class=&quot;headerlink&quot; title=&quot;Flex 布局&quot;&gt;&lt;/a&gt;Flex 布局&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;网页布局&lt;/strong&gt; (layout) 是 CSS 
      
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
      <category term="flex" scheme="http://yoursite.com/tags/flex/"/>
    
  </entry>
  
</feed>
