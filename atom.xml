<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>生命1昊</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-24T01:09:12.700Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>_日天昊</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>&#39;js基础&#39;</title>
    <link href="http://yoursite.com/2019/04/23/js%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2019/04/23/js基础/</id>
    <published>2019-04-23T00:41:18.000Z</published>
    <updated>2019-04-24T01:09:12.700Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js基础篇"><a href="#js基础篇" class="headerlink" title="js基础篇"></a>js基础篇</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><strong>函数的作用</strong> ,可以写一次代码, 封装到函数中, 然后反复的使用这个函数。</p><blockquote><p><strong>注意: 函数也是一个对象</strong></p></blockquote><h3 id="函数的声明"><a href="#函数的声明" class="headerlink" title="函数的声明"></a>函数的声明</h3><ul><li><p>构造方法创建函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var fun = new Function(``) </span><br><span class="line"></span><br><span class="line">打印此函数为 ==&gt;</span><br><span class="line"></span><br><span class="line">`function anyomous()&#123;&#125;` -- aonymous 意为 不知名,匿名</span><br></pre></td></tr></table></figure></li><li><p>字面量创建函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function 函数名()&#123;</span><br><span class="line">    函数体;</span><br><span class="line">    return 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>匿名函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function()&#123;&#125; --&gt; 这是一个匿名函数, 匿名函数的本身是一个函数对象</span><br></pre></td></tr></table></figure></li><li><p>函数表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">匿名函数如果要反复使用, 可以使用函数表达式的形式</span><br><span class="line">var fun = function()&#123;&#125;; --&gt; 函数表达式 不会进行提升</span><br></pre></td></tr></table></figure></li></ul><h3 id="函数的调用和参数"><a href="#函数的调用和参数" class="headerlink" title="函数的调用和参数"></a>函数的调用和参数</h3><ul><li><p>函数调用</p><ol><li><p>无论是哪一个函数的声明方式都是通过: <code>函数名(实参..)</code> 的形式调用。 </p></li><li><p>在标签中调用函数必须要加上括号, 例: <code>onclick = &#39;函数名(实参1,...,实参n)&#39;</code> </p></li></ol></li><li><p>函数参数</p></li></ul><p>调用函数的时候解析器不会检查实参的类型和数量, 所以多传几个实参也不会报错, 多传的实参可以通过arguments对象获取到。</p><h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><ol><li><p>调用函数之后会得到一个返回值。如果没有使用 return 显示返回一个值, 则默认返回undefined。</p></li><li><p>return 之后的代码不会被执行</p></li><li><p>return 可以返回任意数据类型的值。</p></li></ol><h3 id="自执行函数-立即执行函数"><a href="#自执行函数-立即执行函数" class="headerlink" title="自执行函数(立即执行函数)"></a>自执行函数(立即执行函数)</h3><ul><li>如果要封装一个代码块, 并且执行一次, 需要变量名吗? </li></ul><p>变量名会在cpu中 开辟空间, 占用资源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;(function()&#123; 函数体; &#125;)() --&gt; 在前面加分号为了避免之前的代码没有加 ; 导致计算机不能正确的认识代码</span><br></pre></td></tr></table></figure><h3 id="隐式全局变量"><a href="#隐式全局变量" class="headerlink" title="隐式全局变量"></a>隐式全局变量</h3><p>在函数中如果没有在全局和函数作用域 中 都没有声明该变量, 那么该变量会被隐式声明为全局变量, 但是这种语法是错误的, 在 严格模式(use strict) 下会报错。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function say()&#123;</span><br><span class="line">    // 隐式全局变量, 错误的语法, 在严格模式下会报错</span><br><span class="line">    age = 20; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="JSON-JavaScript-Object-Notation-js对象表示法"><a href="#JSON-JavaScript-Object-Notation-js对象表示法" class="headerlink" title="JSON(JavaScript Object Notation js对象表示法)"></a>JSON(JavaScript Object Notation js对象表示法)</h2><ul><li>为什么要有JSON</li></ul><p>JS对象只会JS自己认识, 其他语言都不认识。</p><p>JSON就是一个特殊格式的字符串, 这个字符串可以被任意语言识别, 可以完成语言与语言之间的交互, 转化成任意语言中的对象,JSON在开发中主要是交互数据。 例: 前后端的交互。</p><h3 id="JSON对象"><a href="#JSON对象" class="headerlink" title="JSON对象"></a>JSON对象</h3><p>JSON对象的本质就是JS对象, 按照一定的书写规范, 在JSON对象和JSON对象字符串之间的转换。JSON不兼容ie7</p><p>JSON分为 JSON数组 和 JSON对象,JSON 对象 可以理解成是 对 JS 对象的 JSON 格式</p><p>JSON中允许的值:</p><pre><code>1. 字符串2. 数值3. 布尔值4. null5. 对象6. 数组</code></pre><blockquote><p>JSON对象中不能写函数对象,且属性名要加引号</p></blockquote><h3 id="JSON工具类"><a href="#JSON工具类" class="headerlink" title="JSON工具类"></a>JSON工具类</h3><p>在JS中提供了JSON工具类, 可以使JSON字符串和JSON对象互相转换;</p><ul><li><p>parse方法 将JSON字符串转换为js对象</p></li><li><p>stringify方法 将对象转换为json字符串</p></li></ul><h3 id="eval-方法"><a href="#eval-方法" class="headerlink" title="eval()方法"></a>eval()方法</h3><p>这个函数可以用来执行一段字符串形式的代码,并执行结果返回<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot;alert(&apos;hello&apos;)&quot;</span><br><span class="line">eval(str)</span><br><span class="line">==&gt; 页面弹出 hello</span><br></pre></td></tr></table></figure></p><p>如果执行的字符串中含有{}, 会将{} 当成代码块, 如果不希望将其当成代码块解析, 则需要在字符串前后在上()<br>eval() 可以将 JSON 转为js 对象, 因为性能差, 具备安全隐患所有不建议使用。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;js基础篇&quot;&gt;&lt;a href=&quot;#js基础篇&quot; class=&quot;headerlink&quot; title=&quot;js基础篇&quot;&gt;&lt;/a&gt;js基础篇&lt;/h1&gt;&lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函
      
    
    </summary>
    
      <category term="js基础" scheme="http://yoursite.com/categories/js%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="js基础" scheme="http://yoursite.com/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>&#39;js高级部分&#39;</title>
    <link href="http://yoursite.com/2019/04/23/js%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86/"/>
    <id>http://yoursite.com/2019/04/23/js高级部分/</id>
    <published>2019-04-23T00:21:48.000Z</published>
    <updated>2019-04-24T01:09:22.754Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js高级部分"><a href="#js高级部分" class="headerlink" title="js高级部分"></a>js高级部分</h1><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="面向对象的特点"><a href="#面向对象的特点" class="headerlink" title="面向对象的特点"></a>面向对象的特点</h3><p>面向对象编程具有, 复用性强, 灵活性强, 易扩展易维护; 比起传统的面向过程更适合多人合作的大型项目。</p><h3 id="面向对象的三大特征"><a href="#面向对象的三大特征" class="headerlink" title="面向对象的三大特征"></a>面向对象的三大特征</h3><ol><li>封装</li><li>继承</li><li>多态(抽象)</li></ol><h3 id="面向对象和面向过程"><a href="#面向对象和面向过程" class="headerlink" title="面向对象和面向过程"></a>面向对象和面向过程</h3><ol><li><p>面向过程是亲力亲为, 面向对象是将执行者转变为智慧者。</p></li><li><p>面向对象就是特定的功能让特定的对象来实现。</p></li><li><p>面向对象不是面向过程的代替, 而是面向过程的封装</p></li></ol><h3 id="js面向对象的方式"><a href="#js面向对象的方式" class="headerlink" title="js面向对象的方式"></a>js面向对象的方式</h3><ol><li><p>在 js 中面向对象中创建实例的模板是构造函数。</p></li><li><p>在其他语言中对象模板是类。</p></li></ol><h3 id="静态成员和实例成员"><a href="#静态成员和实例成员" class="headerlink" title="静态成员和实例成员"></a>静态成员和实例成员</h3><p>js静态成员(java中静态的属性和方法)</p><ol><li>js 中静态成员是以对象字面量的形式创建,没有构造函数( 例: Math对象, Math 对象不是构造函数 )</li></ol><p>// 模拟Math对象<br>var MyMath = {<br>    PI: 3.14..,<br>    max:function(){},<br>    min:function(){}<br>}</p><ol start="2"><li>静态成员可以直接调用使用静态对象来调用, 实例成员调用需要创建实例对象调用。</li></ol><blockquote><p><strong>注意:</strong> Math 是以字面量形式创建, 没有构造函数, 无法通过new Math() 创建对象。 </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;js高级部分&quot;&gt;&lt;a href=&quot;#js高级部分&quot; class=&quot;headerlink&quot; title=&quot;js高级部分&quot;&gt;&lt;/a&gt;js高级部分&lt;/h1&gt;&lt;h2 id=&quot;面向对象&quot;&gt;&lt;a href=&quot;#面向对象&quot; class=&quot;headerlink&quot; title=&quot;面
      
    
    </summary>
    
      <category term="js进阶" scheme="http://yoursite.com/categories/js%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="js面向对象" scheme="http://yoursite.com/tags/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>&#39;html笔记&#39;</title>
    <link href="http://yoursite.com/2019/04/23/html%E7%AC%94%E8%AE%B0-0/"/>
    <id>http://yoursite.com/2019/04/23/html笔记-0/</id>
    <published>2019-04-23T00:19:23.000Z</published>
    <updated>2019-04-23T00:19:23.653Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>css笔记</title>
    <link href="http://yoursite.com/2019/04/23/css%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/04/23/css笔记/</id>
    <published>2019-04-23T00:16:47.000Z</published>
    <updated>2019-04-23T00:18:39.589Z</updated>
    
    <content type="html"><![CDATA[<h1 id="css篇"><a href="#css篇" class="headerlink" title="css篇"></a>css篇</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;css篇&quot;&gt;&lt;a href=&quot;#css篇&quot; class=&quot;headerlink&quot; title=&quot;css篇&quot;&gt;&lt;/a&gt;css篇&lt;/h1&gt;
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>HTML笔记</title>
    <link href="http://yoursite.com/2019/04/16/HTML%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/04/16/HTML笔记/</id>
    <published>2019-04-16T00:51:21.000Z</published>
    <updated>2019-04-23T00:30:40.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="常见的通用属性"><a href="#常见的通用属性" class="headerlink" title="常见的通用属性"></a>常见的通用属性</h2><h3 id="id属性"><a href="#id属性" class="headerlink" title="id属性"></a>id属性</h3><p>id属性 作为标签的唯一标识, 在同一个页面中不能出现不同的 id值。 </p><h3 id="class属性"><a href="#class属性" class="headerlink" title="class属性"></a>class属性</h3><p>class属性 用来为标签分组, 拥有相同的 class值 的标签可以看做是一组, 同一个页面中可以出现相同的 class , 同一个标签也可以有多个 id</p><h3 id="title属性"><a href="#title属性" class="headerlink" title="title属性"></a>title属性</h3><p>title属性 用来指定标签的标题, 指定 title 以后, 鼠标移入到元素上方时,会出提示 title属性中的内容。</p><h2 id="常用的标签"><a href="#常用的标签" class="headerlink" title="常用的标签"></a>常用的标签</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h1&gt;&lt;h2 id=&quot;常见的通用属性&quot;&gt;&lt;a href=&quot;#常见的通用属性&quot; class=&quot;headerlink&quot; title=&quot;常见的
      
    
    </summary>
    
      <category term="html" scheme="http://yoursite.com/categories/html/"/>
    
    
      <category term="html基础" scheme="http://yoursite.com/tags/html%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>vue框架概述</title>
    <link href="http://yoursite.com/2019/04/15/vue%E6%A1%86%E6%9E%B6%E6%A6%82%E8%BF%B0/"/>
    <id>http://yoursite.com/2019/04/15/vue框架概述/</id>
    <published>2019-04-15T13:11:59.000Z</published>
    <updated>2019-04-15T13:12:36.153Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="vue框架" scheme="http://yoursite.com/categories/vue%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="框架概述" scheme="http://yoursite.com/tags/%E6%A1%86%E6%9E%B6%E6%A6%82%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>vue路由</title>
    <link href="http://yoursite.com/2019/04/15/vue%E8%B7%AF%E7%94%B1/"/>
    <id>http://yoursite.com/2019/04/15/vue路由/</id>
    <published>2019-04-15T11:26:05.000Z</published>
    <updated>2019-04-25T15:11:12.493Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue-router-路由"><a href="#vue-router-路由" class="headerlink" title="vue-router(路由)"></a>vue-router(路由)</h1><h2 id="路由起步"><a href="#路由起步" class="headerlink" title="路由起步"></a>路由起步</h2><p>当引入vue-router包之后, 在window中就有了VueRouter构造器, 此时在打开网页时, 路径后就会加一个 #/ (#/ 被称为哈希) </p><p>通过注入vue-router.js, 我们可以在任何组件内 访问到 路由 和 路由器, 也可以通过 this.$route 访问路由。同一个Vue实例中, $route 和 $router  是整个 #app 和 组件 中共有的。</p><p><strong>注意:</strong> 如果路由匹配成功, 将自动设置class=”router-link-active”属性值</p><p><strong>使用步骤:</strong><br>HTML部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用 VueRouter 提供的标签 router-link 组进行导航 --&gt;</span><br><span class="line">&lt;!-- &apos;to&apos;属性指向链接 --&gt;</span><br><span class="line">&lt;!-- router-link 默认会解析成 a标签, 可以使用 tag 属性指定解析成你想要的标签 --&gt;</span><br><span class="line">&lt;router-link to=&quot;/login&quot; tag=&quot;span&quot;&gt;登录&lt;/router-link&gt;</span><br><span class="line">&lt;router-link to-&quot;/register&quot;&gt;注册&lt;router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 路由出口, 占位符, 将路由匹配到的组件展示在这里 --&gt;</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure></p><p>JS部分</p><blockquote><p><strong>注意:</strong> 如果使用模块化机制编程, 导入Vue 和VueRouter 要调用vue.use(VueRouter)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 1. 创建组件模板</span><br><span class="line">var login = &#123;</span><br><span class="line">    template:&apos;&lt;div&gt;这是登录组件&lt;/div&gt;&apos;</span><br><span class="line">&#125;</span><br><span class="line">var register = &#123;</span><br><span class="line">    template:&apos;&lt;div&gt;注册&lt;/div&gt;&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 2. 创建路由对象</span><br><span class="line">var router = new VueRouter(&#123;</span><br><span class="line">    routes:[</span><br><span class="line">        &#123;path:&apos;/login&apos;,</span><br><span class="line">        component:login&#125;,</span><br><span class="line">        &#123;path:&apos;/register&apos;,</span><br><span class="line">        component:register&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 3. 把路由对象注入/ 挂载到vue实例中, 从而让整个应用都有路由功能</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">    el:&apos;#app&apos;,</span><br><span class="line">    router</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><hr><h2 id="动态路由的匹配-路由传参"><a href="#动态路由的匹配-路由传参" class="headerlink" title="动态路由的匹配(路由传参)"></a>动态路由的匹配(路由传参)</h2><blockquote><p>假设有一个 登录组件 ,对于所有的用户ID, 都要使用这个组件来渲染, 那么每次渲染的时候 虽然是同一个组件, 但是每个用户的数据不同, 那么就可以在 路由的匹配规则中使用 动态路径参数 来实现该功能。</p></blockquote><h3 id="params动态路径参数"><a href="#params动态路径参数" class="headerlink" title="params动态路径参数"></a>params动态路径参数</h3><blockquote><p>注意: 是 $route.params 而不是 $router</p></blockquote><ul><li>使用方法</li></ul><ol><li>在路由匹配规则中对参数进行占位, 跳转的时候 <strong>必须</strong> 要传一个与该参数对应的值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/login/001&quot; &gt;登录&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    path:&apos;/login/:键&apos;,</span><br><span class="line">    component:`</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h2&gt;这是登录组件,当前用户为:&#123;&#123;$route.params.id&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    `</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>匹配多个参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/account/001/login/002&quot;&gt;</span><br><span class="line"></span><br><span class="line">&#123;path:&apos;/account/:type/login/:id&apos;&#125;</span><br><span class="line"></span><br><span class="line">==》$route.params:&#123;type:&apos;001&apos;,id:&apos;002&apos;&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="query传参"><a href="#query传参" class="headerlink" title="query传参"></a>query传参</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/login?id=001&quot;&gt;</span><br><span class="line"></span><br><span class="line">$route.query :&#123;id:&apos;001&apos;&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="设置路由的激活样式"><a href="#设置路由的激活样式" class="headerlink" title="设置路由的激活样式"></a>设置路由的激活样式</h2><h3 id="router-link-active"><a href="#router-link-active" class="headerlink" title="router-link-active"></a>router-link-active</h3><blockquote><p>当匹配上的路由跳转之后, 会加上 router-link-active 的class属性值, 可以通过给router-link-active 来设置当前激活路由的样式</p></blockquote><h3 id="router-link-exact-active"><a href="#router-link-exact-active" class="headerlink" title="router-link-exact-active"></a>router-link-exact-active</h3><blockquote><p>该类选择器是当前 激活 的 精确 路由, 而router-link-active 是当前路由中所有匹配到的路由, 例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/account/login  ==&gt;  account,login</span><br><span class="line"></span><br><span class="line">--&gt; account,login都是路径匹配到的路由,都会有router-link-active</span><br><span class="line"></span><br><span class="line">--&gt; 只有 login 是当前精确的路由 会有router-link-exact-active</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="linkActiveClass属性"><a href="#linkActiveClass属性" class="headerlink" title="linkActiveClass属性"></a>linkActiveClass属性</h3><blockquote><p>路由对象的 linkActiveClass属性 可以自定义 router-link-active 的class 命名, 例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">new VueRouter(&#123;</span><br><span class="line">    routes:[],</span><br><span class="line"></span><br><span class="line">    // 自定义router-link-active 为 myClass</span><br><span class="line">    linkActiveClass: &apos;myClass&apos; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h2><blockquote><p>此重定向原理是直接改变锚点地址, 并不是后端的重定向,不需要通过服务器重定向。</p></blockquote><ol><li>重定向设置默认匹配路径</li></ol><p>例: 当访问 根路径 的时候默认访问/login<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">path:&apos;/&apos;,redirect:&apos;/login&apos;</span><br><span class="line">``` </span><br><span class="line">---</span><br><span class="line">##  捕获所有404路由</span><br><span class="line">&gt; 如果想匹配任意路径, 使用通配符 * </span><br><span class="line"></span><br><span class="line">--- </span><br><span class="line">##  匹配优先级</span><br><span class="line">&gt; 同一路径可以匹配多个路由, 此时谁先定义IDE谁的优先级就高</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">##  路由嵌套</span><br><span class="line">&gt; 路由之间也可以有嵌套关系</span><br></pre></td></tr></table></figure></p><p>/user/foo/profile                     /user/foo/posts<br>+——————+                  +—————–+<br>| User             |                  | User            |<br>| +————–+ |                  | +————-+ |<br>| | Profile      | |  +————&gt;  | | Posts       | |<br>| |              | |                  | |             | |<br>| +————–+ |                  | +————-+ |<br>+——————+                  +—————–+<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+   children </span><br><span class="line">&gt; children 用来设置子路由的匹配规则, 例:</span><br></pre></td></tr></table></figure></p><p>routes:[<br>    {path:’/‘,redirect:’/user’},<br>    {<br>        path:’/user’,<br>        component:user,<br>        children:[<br>            {path:’profile’,component:profile},<br>            {path:’posts’,component:posts}<br>        ]<br>    }<br>]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">##  侦听路由</span><br><span class="line">&gt; 在使用路由参数时, 参数的改变, 原来的组件实例会被复用, 也就是说 /login/张三 到 /login/李四, 它们使用的都是匹配 /login 的组件, 此时组件会被复用, 组件被复用会比较高效, 但这意味着 它们的改变不会调用生命周期函数。</span><br><span class="line"></span><br><span class="line">&gt; 复用组件时, 想对路由的变化做出响应, 可以通过侦听器监听路由的改变</span><br></pre></td></tr></table></figure></p><p>const User = {<br>    template:’…’,<br>    watch:{<br>        ‘$route’(to,from){<br>            // 对路由的变化做出响应<br>        }<br>    }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">##  编程式的导航</span><br><span class="line"></span><br><span class="line">除了使用`&lt;router-link&gt;` 来进行跳转 锚点 之外, 还可以借助 router实例的方法, 通过编写代码来实现。</span><br><span class="line"></span><br><span class="line">在Vue实例内部, 可以访问到$router, 因此可以通过 this.$router.push 导航到不同的URL</span><br></pre></td></tr></table></figure></p><pre><code>// 字符串router.push(&apos;/login&apos;)// 对象router.push({path:&apos;/login&apos;})// 命名的路由,对应路由的name属性router.push({name:&apos;login&apos;,params:{useId:&apos;123&apos;}})// 如果提供了 path, params会被忽略 , 但是query不会router.push({path:&apos;/login&apos;,query:{useId:&apos;123&apos;}})// 带有params参数应该写成如下形式router.push({path:&apos;/login/useId&apos;})</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+   router.replace</span><br><span class="line">&gt; router.replace 跟 router.push 很像, 唯一的不同就是, 它不会像history中添加新记录, 而是跟它的方法名一样 --- 替换掉当前的 history 记录</span><br><span class="line"></span><br><span class="line">+   router.go(n), 意思是历史记录,前进或者后退n步</span><br></pre></td></tr></table></figure><p>router.go(1) –&gt; 前进1步</p><p>rouetr.go(-1) –&gt; 后退1步<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">##  命名路由</span><br><span class="line"></span><br><span class="line">有时候, 通过名称来表示一个路由显的更方便一点, 可以通过路由匹配规则中添加name 属性, 例:</span><br></pre></td></tr></table></figure></p><p>{path:’/login’,<br>name:’login’,<br>component:login}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">router-link 通过 路由的 name 跳转, 这和 push 很相似, to 后面要跟一个对象</span><br></pre></td></tr></table></figure></p><p><router-link to="{name:'login',params:{userId:'001'}}"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">##  命名视图</span><br><span class="line">&gt; 时候想要同一个路径展示多个组件,而不是嵌套展示,可以使用命名视图, 区别于命名路由</span><br></pre></td></tr></table></figure></router-link></p><p>// 如果路由出口 router-view 没有设置 name , 则 name 默认为 default</p><template id="login"><br>    <router-view name="a"></router-view><br>    <router-view name="b"></router-view><br>    <router-view></router-view><br></template><p>const router = VueRouter({<br>    routes:[<br>        {path:’/login’,<br>        components:{<br>            default:com1,<br>            a:com2,<br>            c:com3<br>        }}<br>    ]<br>})<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##  导航守卫</span><br><span class="line"></span><br><span class="line">&gt; **导航** 表示路由正在发生改变。</span><br><span class="line"></span><br><span class="line">正如其名, `vue-router` 提供的导航守卫主要用来 通过跳转或取消的方式来 守卫**导航** 。</span><br><span class="line"></span><br><span class="line">&gt; **注意:** 路由中参数的改变并不会触发 进入/离开 的导航守卫。你可以通过侦听 `$route`对象 或 beforeRouteUpdate 的组件内守卫。 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 全局前置守卫</span><br><span class="line"></span><br><span class="line">router.beforeEach 用来注册一个全局前置守卫,当一个导航触发时, 全局前置守卫按照创建顺序调用。守卫是异步解析执行, 此时导航( 正在发生改变的路径 )在所有的守卫resolve 完之前一直处于等待状态。</span><br><span class="line"></span><br><span class="line">&gt; 全局导航每个路由的改变都会触发, 不会触发路由参数的改变</span><br><span class="line"></span><br><span class="line">**每个守卫方法接受三个参数:**</span><br><span class="line"></span><br><span class="line">+   to, 即将要进入的目标路由</span><br><span class="line"></span><br><span class="line">+   from, 当前导航( 表示路由正在发生改变 )正要离开的路由</span><br><span class="line"></span><br><span class="line">+   next, **一定要调用该方法resolve这个钩子(before)** ,执行效果依赖于next方法的参数。</span><br><span class="line"></span><br><span class="line">    - next() 执行管道中的下一个钩子, 如果管道中的钩子执行完了, 则导航的状态就是 confirm (确认的,即确定进入to:route)</span><br><span class="line"></span><br><span class="line">    - next(false): 中断当前的导航。如果浏览器的url改变了( 可能是用户手动输入了 url 或浏览器后退按钮 ),那么 URL 的地址会重置到 from 对应的路由。</span><br><span class="line"></span><br><span class="line">    - next(&apos;/&apos;) 或者是 next(&#123;path:&apos;/&apos;&#125;) 跳转到一个不同的地址。即当前跳转的导航中断, 然后进行一个新的导航。可以向next() 中传递任意对象, 且允许设置诸如 replace:true, name:&apos;home&apos; 之类的选项 以及 用在 router-link 中的 to属性 和应用在 router.push 中的选项。</span><br><span class="line"></span><br><span class="line">    - next(error) 如果传给next的是一个 Error 实例, 则导航会被终止, 且错误会被传递给 router.onError() 注册过的回调 --&gt; 暂时不了解</span><br><span class="line">### 全局解析守卫</span><br><span class="line"></span><br><span class="line">router.beforeResolve 注册一个全局解析守卫, 这和 `beforeEach` 类似, 区别在导航被确认之前, 同时在所有的组件内守卫 和 异步路由组件 被解析之后, 解析守卫会被调用。</span><br><span class="line"></span><br><span class="line">### 全局后置钩子</span><br><span class="line"></span><br><span class="line">`router.afterEach` 注册一个全局后置钩子, 这些钩子不会接受 next 参数, 不会改变导航本身。</span><br><span class="line"></span><br><span class="line">### 路由独享的守卫</span><br><span class="line"></span><br><span class="line">可以在路由里直接定义 `beforeEnter` 守卫</span><br></pre></td></tr></table></figure></p><p>const router = new VueRouter({<br>    routes: [<br>        {<br>            path:’/home’,<br>            component: Home,<br>            beforeEnter: () =&gt; {<br>                …<br>            }<br>        }<br>    ]<br>})<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 组件内的守卫</span><br><span class="line"></span><br><span class="line">最后, 可以在路由组件内定义以下路由导航守卫: </span><br><span class="line"></span><br><span class="line">+   beforeRouteEnter </span><br><span class="line"></span><br><span class="line">    1. 该钩子会在渲染该组件的对应路由被 confirm 前被调用</span><br><span class="line"></span><br><span class="line">    2. **不能** 获取组件 **实例this** ,因为当守卫执行完之前, 组件实例还没有被创建。</span><br><span class="line"></span><br><span class="line">+   beforeRouteUpdate </span><br><span class="line">    </span><br><span class="line">    1. 在当前路由改变, 但是组件被复用的时候调用, 例: 动态匹配路由 </span><br><span class="line"></span><br><span class="line">    2. 该钩子**可以访问组件实例this**</span><br><span class="line"></span><br><span class="line">+   beforeRouteLeave</span><br><span class="line"></span><br><span class="line">    1. 导航离开该组件的路有时调用</span><br><span class="line"></span><br><span class="line">    2. 可以访问 this </span><br><span class="line"></span><br><span class="line">&gt; beforeRouteEnter 不能访问到 组件实例this, 是因为该守卫在导航被确认之前被调用, 此时即将登场的新组建还没有被创建。</span><br><span class="line"></span><br><span class="line">&gt; **但是,** 可以传一个回调函数给`next`来访问组件实例。在导航被确认的时候执行回调, 并且把组件的实例作为回调方法的参数。</span><br></pre></td></tr></table></figure></p><p>beforeRouteEnter(to, from, next){<br>    next( vm =&gt; {<br>        // 通过 vm 访问组件实例<br>    })<br>}<br><code>`</code></p><blockquote><p><strong>注意:</strong> <code>beforeRouteEnter</code> 是唯一支持 next 方法中传回调函数获取 组件实例的钩子, 对 <code>beforeRouteUpdate</code> <code>beforeRouteLeave</code> 两者来说也没有要使用回调获取组件实例的必要</p></blockquote><blockquote><p><code>beforeRouteLeave</code> 一般用来禁止用户还未保存修改之前离开。该导航可以通过 next(false) 取消。</p></blockquote><h3 id="导航完整的解析-resolve-流程"><a href="#导航完整的解析-resolve-流程" class="headerlink" title="导航完整的解析(resolve)流程"></a>导航完整的解析(resolve)流程</h3><ol><li><p>导航被触发</p></li><li><p>在失活的组件内调用离开守卫 <code>beforeRouteLeave</code></p></li><li><p>调用全局的 <code>beforeEach</code> 守卫</p></li><li><p>在重用的组件里调用 <code>beforeRouteUpdate</code> 守卫 (2.2+)</p></li><li><p>在路由配置里调用 <code>beforeEnter</code></p></li><li><p>解析异步路由组件</p></li><li><p>在被激活的组件里调用<code>beforeRouteEnter</code>。</p></li><li><p>调用全局的<code>beforeResolve</code> 守卫(2.5+)</p></li><li><p>导航被确认confirm</p></li><li><p>调用全局的afterEach钩子( afterEach 在confirm 之后 触发DOM更新之前调用)</p></li><li><p>触发DOM更新</p></li><li><p>用创建好的组件实例调用<code>beforeRouteEnter</code>守卫中传给 next 回调函数。</p></li></ol><h2 id="路由元信息"><a href="#路由元信息" class="headerlink" title="路由元信息"></a>路由元信息</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue-router-路由&quot;&gt;&lt;a href=&quot;#vue-router-路由&quot; class=&quot;headerlink&quot; title=&quot;vue-router(路由)&quot;&gt;&lt;/a&gt;vue-router(路由)&lt;/h1&gt;&lt;h2 id=&quot;路由起步&quot;&gt;&lt;a href=&quot;#路由起
      
    
    </summary>
    
      <category term="vue框架" scheme="http://yoursite.com/categories/vue%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="vue路由" scheme="http://yoursite.com/tags/vue%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>vue组件-下</title>
    <link href="http://yoursite.com/2019/04/15/vue%E7%BB%84%E4%BB%B6-%E4%B8%8B/"/>
    <id>http://yoursite.com/2019/04/15/vue组件-下/</id>
    <published>2019-04-15T07:04:28.000Z</published>
    <updated>2019-04-15T12:56:39.176Z</updated>
    
    <content type="html"><![CDATA[<h1 id="组件-下"><a href="#组件-下" class="headerlink" title="组件-下"></a>组件-下</h1><h2 id="vue插槽"><a href="#vue插槽" class="headerlink" title="vue插槽"></a>vue插槽</h2><blockquote><p>在组件标签中的内容, 被称为组件插槽。</p></blockquote><blockquote><p>如果组件模板中没有定义 <code>&lt;slot&gt;&lt;/slot&gt;</code> 那么组件标签中间的内容都会被抛弃, <code>&lt;slot&gt;</code> 是一个占位符。</p></blockquote><blockquote><p>插槽中的内容可以是文本, 标签, 甚至是组件。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-com&gt;</span><br><span class="line">插槽内容: 可以是文本, 标签, 甚至是组件。</span><br><span class="line">&lt;/my-com&gt;</span><br></pre></td></tr></table></figure><h3 id="编译作用域"><a href="#编译作用域" class="headerlink" title="编译作用域"></a>编译作用域</h3><p>插槽作用域: 可以简单的理解为, 在谁控制的区域写, 就是写在谁的作用域内。</p><blockquote><p><strong>作为一条规则, 请记住:</strong> 父级模板中的所有内容都是在父级作用域中编译的, 子模板里的所有内容都是在子作用域中编译的。</p></blockquote><h3 id="后备插槽-插槽的默认值"><a href="#后备插槽-插槽的默认值" class="headerlink" title="后备插槽(插槽的默认值)"></a>后备插槽(插槽的默认值)</h3><p>插槽 可以有 默认值, 称为后备插槽, 当组件标签中没有内容的时候, 我们可以在组件模板中的<code>&lt;slot&gt;默认值&lt;/slot&gt;</code> 中间设置默认值</p><blockquote><p><strong>注意:</strong> 由于编译作用域的关系, 后备插槽是无法直接引用同级组件作为后备内容的, 而父级组件中引用子组件 的标签中间部分 可以引用同级组件作为后备内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-com&gt;&lt;插槽可以引用同级组件&gt;&lt;/my-com&gt;</span><br><span class="line"></span><br><span class="line">&lt;slot&gt;插槽默认内容无法使用引用同级组件&lt;/slot&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>在使用集成框架的时候见的比较多, 具名插槽出现的需求是 一个组件的内容<code>&lt;slot&gt;</code>部分, 如何实现同时插入多个<code>&lt;slot&gt;</code></p><p>没有 v-slot 指令的指默认为 default, 无论怎么打乱布局, 都会只按照模板对象中 <code>&lt;slot&gt;</code> 的位置进行排版</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-com&gt;</span><br><span class="line">    &lt;template v-slot:header &gt;</span><br><span class="line">        &lt;h2&gt;这是header部分&lt;/h2&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;p&gt;default&lt;/p&gt;</span><br><span class="line">    &lt;template v-slot:footer&gt;</span><br><span class="line">        &lt;h2&gt;这是footer部分&lt;/h2&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;p&gt;default&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;default&lt;/p&gt;</span><br><span class="line">&lt;/my-com&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template id=&quot;tmpl&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;p&gt;这是myCom组件&lt;/p&gt;</span><br><span class="line">        &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;slot&gt;&lt;/slot&gt;      &lt;!-- 对于没有name 的slot 会有一个隐式的名字 --&gt;</span><br><span class="line">        &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="vue作用域插槽"><a href="#vue作用域插槽" class="headerlink" title="vue作用域插槽"></a>vue作用域插槽</h3><blockquote><p>作用域插槽可以让插槽内容, 访问到子组件中的数据。这在有些时候是比较有用的</p></blockquote><p>例: 父级作用域要访问 子组件 <code>&lt;current-user&gt;</code> 中的 user 数据。首先要现在子组件的<code>&lt;slot&gt;</code>将该数据作为属性绑定到自身。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;current-user&gt;</span><br><span class="line">    &lt;!-- 包含所有插槽 prop 的对象命名为 slotProps --&gt;</span><br><span class="line">    &lt;template v-slot:default=&quot;propSlot&quot;&gt;</span><br><span class="line">        &#123;&#123;propSlot.user&#125;&#125;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/current-user&gt;</span><br><span class="line"></span><br><span class="line">&lt;template id=&quot;current-user&quot;&gt;</span><br><span class="line">    &lt;!-- 绑定在 &lt;slot&gt; 元素上的值 被称为插槽prop --&gt;</span><br><span class="line">    &lt;slot :user=&quot;user&quot;&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="处理边界情况"><a href="#处理边界情况" class="headerlink" title="处理边界情况"></a>处理边界情况</h2><blockquote><p>在绝大多数情况下, 我们最好不要触达另一个组件实例内部或手动操作 DOM 元素。不过也确实在一些情况下做这些事情是合适的。</p></blockquote><ol><li><p>访问根实例</p><p> 在每个Vue实例的子组件中, 其根实例可以通过<code>root</code>属性进行访问。例如,在这个根实例中: </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data:&#123;</span><br><span class="line">    foo:1;</span><br><span class="line">&#125;,</span><br><span class="line">computed:&#123;</span><br><span class="line">    bar()&#123;</span><br><span class="line">        return 2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">    baz()&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 所有的子组件都可以将这个实例作为一个全局 store 来访问或使用。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;return &#123;...&#125;&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">    test()&#123; // 子组件中的方法</span><br><span class="line">        this.$root.foo          --&gt; 获取根组件 data 中的foo</span><br><span class="line">        this.$root.foo = 11;    --&gt; 写入根组件 data 中的 foo</span><br><span class="line">        this.$root.bar          --&gt; 读取根组件中的计算属性 bar </span><br><span class="line">        this.$root.baz()        --&gt; 调用根组件中的 baz 方法</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>访问父级组件实例</p><p> 访问父级组件实例通过 <code>$parent</code> 来获取组件实例</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test()&#123; // 子组件中的方法</span><br><span class="line">    // 获取父级组件对象</span><br><span class="line">    this.$parent</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>访问子元素和子组件</p><p> 在 组件标签 和 html标签 中添加 <code>ref</code> 属性。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-com ref=&quot;com&quot;&gt;&lt;/my-com&gt;</span><br><span class="line">&lt;p ref=&quot;p&quot;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><p> 在根组件中, 通过 <code>$refs</code> 获取子组件和子元素</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this.$refs.com   --&gt;  获取 my-com 组件</span><br><span class="line">this.$refs.p     --&gt;  获取 p 标签</span><br></pre></td></tr></table></figure></li></ol><blockquote><p><strong>注意:</strong> 当<code>ref</code> 和<code>v-for</code> 一起使用的时候, 你得到的引用将会是一个包含了对应数据源的子组件 和 标签 的数组。</p></blockquote><blockquote><p><strong>注意:</strong> <code>refs</code> 只会在组件渲染完成之后生效, 并且他们不是响应式的。这仅作为一个用于直接操作子组件的”逃生舱” – 你应该避免在模板或计算属性中访问<code>$ref</code>。</p></blockquote><hr><h2 id="过渡-动画"><a href="#过渡-动画" class="headerlink" title="过渡/动画"></a>过渡/动画</h2><blockquote><p>掌握两组class<br>在<code>v-leave-active</code>,<code>v-enter-active</code>中添加<code>transition</code>, 给<code>v-leave-active</code>,<code>v-enter</code>中添加如何移动,例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.v-leave-active,.v-enter-active&#123;</span><br><span class="line">    transition: all .4s ease;</span><br><span class="line">&#125;</span><br><span class="line">.v-leave-to,.v-enter&#123;</span><br><span class="line">    opacity:0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;组件-下&quot;&gt;&lt;a href=&quot;#组件-下&quot; class=&quot;headerlink&quot; title=&quot;组件-下&quot;&gt;&lt;/a&gt;组件-下&lt;/h1&gt;&lt;h2 id=&quot;vue插槽&quot;&gt;&lt;a href=&quot;#vue插槽&quot; class=&quot;headerlink&quot; title=&quot;vue插槽&quot;&gt;
      
    
    </summary>
    
      <category term="vue框架" scheme="http://yoursite.com/categories/vue%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="vue组件" scheme="http://yoursite.com/tags/vue%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>数据结构线性表-待改进</title>
    <link href="http://yoursite.com/2019/04/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BA%BF%E6%80%A7%E8%A1%A8-%E5%BE%85%E6%94%B9%E8%BF%9B/"/>
    <id>http://yoursite.com/2019/04/15/数据结构线性表-待改进/</id>
    <published>2019-04-15T05:27:58.000Z</published>
    <updated>2019-04-15T06:12:36.313Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue组件-上</title>
    <link href="http://yoursite.com/2019/04/15/vue%E7%BB%84%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/04/15/vue组件/</id>
    <published>2019-04-15T02:00:09.000Z</published>
    <updated>2019-04-15T07:03:57.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><p>组件的出现, 就是为了拆分Vue实例的代码量, 能够以不同的组件划分不同的模块, 我们需要什么功能, 就调用什么功能的模块</p><h2 id="为什么需要组件"><a href="#为什么需要组件" class="headerlink" title="为什么需要组件"></a>为什么需要组件</h2><ol><li><p>封装代码, 提高代码的复用性。</p></li><li><p>提高代码的可维护性。</p></li></ol><hr><h2 id="模块化和组件化的区别"><a href="#模块化和组件化的区别" class="headerlink" title="模块化和组件化的区别"></a>模块化和组件化的区别</h2><ol><li><p>模块化是从代码逻辑的角度进行划分的, 方便代码分层开发, 保证每个模块的功能单一, 易扩展易维护。</p></li><li><p>组件化是从ui界面的角度进行划分的, 方便UI组件的重用。</p></li></ol><h2 id="组件的使用"><a href="#组件的使用" class="headerlink" title="组件的使用"></a>组件的使用</h2><h3 id="创建组件模板的三种方式"><a href="#创建组件模板的三种方式" class="headerlink" title="创建组件模板的三种方式"></a>创建组件模板的三种方式</h3><blockquote><p><strong>注意1:</strong> 组件模板中有且只能有一个根节点。</p></blockquote><blockquote><p><strong>注意2:</strong> 在vue实例中组件注册时, 名称使用驼峰式命名, 而在页面中使用组件 标签名对应的驼峰要用 - 隔开。</p></blockquote><blockquote><p><strong>注意3:</strong> 如果额米有使用驼峰式命名可以直接在页面使用该组件名称, 但是一般为了区分原生 html 标签, 组件一般用 - 隔开</p></blockquote><ol><li><p>使用extend创建组件模板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var myCom = Vue.extend(&#123;</span><br><span class="line">    template:&apos;&lt;div&gt; myCom组件 &lt;/div&gt;&apos;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>使用字面量形式创建模板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var myCom = &#123;</span><br><span class="line">    template:&apos;&lt;div&gt; myCom组件 &lt;/div&gt;&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用template标签创建模板</p></li></ol><p>html部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template id=&quot;my-com&quot;&gt;</span><br><span class="line">    &lt;div&gt; myCom组件 &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p><p>js部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var myCom = &#123;</span><br><span class="line">    template:&apos;#my-com&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="组件的使用步骤"><a href="#组件的使用步骤" class="headerlink" title="组件的使用步骤"></a>组件的使用步骤</h3><ol><li><p>创建组件模板对象</p></li><li><p>创建组件,把模板对象注入到组件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- 全局组件</span><br><span class="line">// 模板对象可以直接用字面量创建, 也可以传递一个模板对象</span><br><span class="line">Vue.component(&apos;组件名&apos;,myCom)</span><br><span class="line"></span><br><span class="line">- 私有组件</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    components:&#123;</span><br><span class="line">        mycom</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>把组件注册到实例中</p></li></ol><h3 id="组件中的data"><a href="#组件中的data" class="headerlink" title="组件中的data"></a>组件中的data</h3><blockquote><p>组件中的data是一个方法, 方法内部返回了一个对象; 而vue实例中data 是一个对虾干;</p></blockquote><blockquote><p>多次复用同一个组件, 每个组件中的数据是相互独立的; 原理是每次复用组件,data中的数据都是一个新对象, 因此他们之前的数据互不影响</p></blockquote><blockquote><p>组件中的data在组件中的使用 与 vue实例中的使用方式相同。</p></blockquote><ul><li>组件中的data为什么是个方法返回一个对象: 通过方法返回一个对象来保证复用组件时,保证data中的数据互不影响</li></ul><h3 id="切换组件"><a href="#切换组件" class="headerlink" title="切换组件"></a>切换组件</h3><blockquote><p>使用 <code>&lt;component&gt;</code> 的is 属性, 也可以实现 组件标签的效果,例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-com&gt;  ==&gt; &lt;component is=&quot;myCom / my-com&quot;&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h3><blockquote><p>子组件默认无法访问父组件中 data 中的数据 和 methods 中的方法。</p></blockquote><p><strong>父组件向子组件传值步骤:</strong></p><ol><li><p>在父组件 使用 子组件 的标签上自定义属性,例: <code>&lt;subCom :msg=&quot;msg&quot;&gt;&lt;/subCom&gt;</code></p></li><li><p>在子组件 <code>props</code> 中定义该自定义属性的键名 <code>msg</code>, <code>props:[&#39;msg&#39;]</code>。</p></li></ol><blockquote><p><strong>注意</strong> 标签的属性值部分不区分大小写, 如果自定义属性为 myProp, 则要定义为 myprop,例:<code>&lt;sub-com :mG=msg&gt;&lt;/sub-com&gt;</code> =&gt; <code>props:&#39;mg&#39;</code>, 一般使用 - 隔开</p></blockquote><ul><li><p>props 与 data的区别</p><ul><li><p>props 中的数据, 都是通过父组件传递给子组件的; 子组件中的data数据并不是通过父组件传递过来的, 而是子组件自身私有的。</p></li><li><p>props是单向数据流, 子组件中定义的props直接修改会有报警提示, 但是可以通过.sync修饰符来修改; 而data中的数据是可读可写的。</p></li><li><p>要想控制 props 中的属性值, 可以通过赋值到 data 中来操控。</p></li></ul></li></ul><h3 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h3><blockquote><p>所有的 prop 都会是父子 prop 之间形成一个 <strong>单行向下邦定:</strong> 父级 prop 的更新会向下流到子组件中, 但反过来则不行, 这样会防止从子组件以外改变父级组件的状态, 从而导致你应用的数据的流向难以理解。</p></blockquote><blockquote><p>额外的, <strong>每次父级组件发生更新时, 子组件中所有的 prop 都将刷新为最新的值</strong>。着以为着你不应该在子组件内部改变prop。如果这样做 vue 会在控制台发出警告。</p></blockquote><p>需要改变 props 中数据的两种情况:</p><ol><li><p><strong>需要 prop 作为本地数据使用</strong> : 把 prop 赋值到 data 中, 作为本地数据使用。</p></li><li><p><strong>需要对 prop 中的数据进行包装</strong> 则可以使用计算属性。</p></li></ol><ul><li><strong>注意:</strong> 单向数据流不会检测 object 属性值的改变。因为 object 传递的是对象的虚地址, 即使修改了对象中属性的值, 虚地址不会因此改变。</li></ul><h3 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h3><p><strong>子组件向父组件传值步骤</strong></p><ol><li><p>父组件中在调用 子级组件的标签上 自定义事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;sub-com @subclick=&quot;click1&quot;&gt;&lt;/sub-com&gt;</span><br><span class="line"></span><br><span class="line">click(arg)&#123;</span><br><span class="line">    console.log(&apos;子组件传递的数据&apos;+arg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>子组件中定义方法, 触发方法时, 借调父级组件 自定义的事件 调用的方法, 并向该方法传递参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">send()&#123;</span><br><span class="line">    this.$emit(&apos;subclick&apos;,this.data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="prop验证-限制prop数据类型"><a href="#prop验证-限制prop数据类型" class="headerlink" title="prop验证(限制prop数据类型)"></a>prop验证(限制prop数据类型)</h3><ol><li><p>为了提供 props 验证的功能, props 也可以指向一个对象而不仅仅是数组</p></li><li><p><strong>注意:</strong> prop 会在 beforeCreate 验证, 所以实例的属性( 如data,computed等 )在 default 或 validator 函数中是不可用的。</p></li><li><p>使用方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// 定义为 String 类型</span><br><span class="line">props:&#123;</span><br><span class="line">    msg:String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 定义为 prop 为 String 或 Number 类型</span><br><span class="line">props:&#123;</span><br><span class="line">    mgs:[string,Number]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 定义 父组件定义属性 的时候,必须传递一个字符串</span><br><span class="line">props:&#123;</span><br><span class="line">    msg:&#123;</span><br><span class="line">        type:String,</span><br><span class="line">        required:true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 定义如果父组件没有定义该 prop ,子组件中 prop 的默认值</span><br><span class="line">props:&#123;</span><br><span class="line">    msg:&#123;</span><br><span class="line">        type:String,</span><br><span class="line">        default:&apos;默认值&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ...</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>type 可以是下列原生构造函数中的一个：</p><ul><li><p>String</p></li><li><p>Number</p></li><li><p>Boolean</p></li><li><p>Array</p></li><li><p>Object</p></li><li><p>Date</p></li><li><p>Function</p></li><li><p>Symbol</p></li></ul></li></ul><h3 id="sync实现双向数据流"><a href="#sync实现双向数据流" class="headerlink" title="sync实现双向数据流"></a>sync实现双向数据流</h3><p>使用步骤: </p><ol><li><p>在父类传值的自定义属性上加上 .sync 修饰符 <code>:msg.sync=&quot;msg&quot;</code></p></li><li><p>修改时, 通过 $emit(‘update:自定义的属性名’,属性值) 响应: <code>$emit(&#39;update:msg&#39;,msg)</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;组件&quot;&gt;&lt;a href=&quot;#组件&quot; class=&quot;headerlink&quot; title=&quot;组件&quot;&gt;&lt;/a&gt;组件&lt;/h1&gt;&lt;p&gt;组件的出现, 就是为了拆分Vue实例的代码量, 能够以不同的组件划分不同的模块, 我们需要什么功能, 就调用什么功能的模块&lt;/p&gt;
&lt;h2 
      
    
    </summary>
    
      <category term="vue框架" scheme="http://yoursite.com/categories/vue%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="vue组件" scheme="http://yoursite.com/tags/vue%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>vue生命周期</title>
    <link href="http://yoursite.com/2019/04/15/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://yoursite.com/2019/04/15/vue生命周期/</id>
    <published>2019-04-15T00:55:51.000Z</published>
    <updated>2019-04-16T00:44:23.530Z</updated>
    
    <content type="html"><![CDATA[<h2 id="生命周期相关概念"><a href="#生命周期相关概念" class="headerlink" title="生命周期相关概念"></a>生命周期相关概念</h2><blockquote><p><strong>生命周期:</strong> 指从vue实例创建, 运行到销毁期间。伴随着各式各样的事件, 这些事件统称为生命周期。</p></blockquote><blockquote><p><strong>生命周期钩子:</strong> 指的是声明周期函数的别名; 生命周期钩子 = 生命周期函数 = 生命周期事件</p></blockquote><hr><h1 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h1><h2 id="生命周期函数分类"><a href="#生命周期函数分类" class="headerlink" title="生命周期函数分类"></a><strong>生命周期函数分类</strong></h2><h3 id="创建期间-的生命周期钩子"><a href="#创建期间-的生命周期钩子" class="headerlink" title="创建期间 的生命周期钩子"></a><strong>创建期间</strong> 的生命周期钩子</h3><ol><li><p>beforeCreate: 表示刚初始化了一个空的实例, 身上只有一些默认的事件和生命周期函数, 其他的属性和方法都未创建; (在beforeCreate生命周期函数执行的时候, data和methods 中的数据都还没有初始化)</p></li><li><p>created: 这个时候data和methods中数据已经初始化完毕, 如果要使用 data 和 methods 中的数据最早只能在created中操作</p></li><li><p>beforeMount: 这里表示已经把 #app模板 编译完成了(已经挂载到了dom树中) 但是尚未渲染到页面中。此时输出dom节点中的数据仍为 mustache插值</p></li><li><p>mounted: 这里表示已经把dom树, 挂载到页面中去, 用户已经可以看到渲染好的页面了, 这时候 mustache插值 已经被替换为 vue实例中的数据, 此时如果没有别的操作,该实例就静静的在内存中发呆。</p></li></ol><h3 id="运行期间-的生命周期钩子"><a href="#运行期间-的生命周期钩子" class="headerlink" title="运行期间 的生命周期钩子"></a><strong>运行期间</strong> 的生命周期钩子</h3><blockquote><p>运行期间的两个事件, 当data改变的时候会被调用, 有选择的触发0 到n 次;</p></blockquote><ol><li><p>beforeUpdate: 该事件执行的时候, data 中的数据已经改变, 但是尚未渲染到页面中的dom元素中, 这时打印data中的数据,和从 dom中获取的该数据是不一致的。</p></li><li><p>updated: 该事件执行的时候, data中的数据已经改变且已经同步到页面中区了; 这时打印data中的数据和从dom中获取的数据是一致的。</p></li></ol><h3 id="销毁期间-的生命周期钩子"><a href="#销毁期间-的生命周期钩子" class="headerlink" title="销毁期间 的生命周期钩子"></a><strong>销毁期间</strong> 的生命周期钩子</h3><ol><li><p>beforeDestroy: 当调用vm.$destroy() 的时候, 该实例开始被销毁,此时开始调用beforeDestroy, 但是 vue实例 身上基本所有的属性都仍然可用; </p></li><li><p>destroyed: 当对象中所有的内容都已经销毁后,调用destroy生命周期钩子 结束vue 实例的声明。</p></li></ol><h2 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h2><blockquote><p>vue的本质是js文件, 所以他应该会和html文件一起构建成dom树, 然后和css 够成渲染树, beforeMounted 是指把vue中编译成的dom模板挂载到dom树中,mounted 是指把 dom树 挂载到页面中。</p></blockquote><blockquote><p>默认是created 先执行之后再执行watch ,因此在created 中 改变值, 并不会触发 watch, 但是immediate:true 时, 监听器会先执行。</p></blockquote><blockquote><p>由于created 在update执行之前执行,所以在created中赋值 也不会触发update</p></blockquote><h3 id="methods-computed-和-watch的执行顺序"><a href="#methods-computed-和-watch的执行顺序" class="headerlink" title="methods,computed 和 watch的执行顺序"></a>methods,computed 和 watch的执行顺序</h3><p>computed, methods 是在created 期间就加载完的, 但是methods 需要调用才会执行,因此它们的执行顺序为：默认加载的时候先computed再watch，不执行methods；等触发某一事件后，则是：先methods再watch。</p><hr><h2 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h2><blockquote><p>  切换组件的时候会触发组件的 生命周期函数 ,但不会触发 销毁期间 钩子函数  (已测试) </p></blockquote><blockquote><p>  路由跳转的时候也会触发组件的生命周期函数,但是也不会触发 销毁期间的钩子函数(销毁未测试)</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;生命周期相关概念&quot;&gt;&lt;a href=&quot;#生命周期相关概念&quot; class=&quot;headerlink&quot; title=&quot;生命周期相关概念&quot;&gt;&lt;/a&gt;生命周期相关概念&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;生命周期:&lt;/strong&gt; 指从vue实例创建,
      
    
    </summary>
    
      <category term="vue框架" scheme="http://yoursite.com/categories/vue%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="vue生命周期" scheme="http://yoursite.com/tags/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>数据结构绪论(待改进)</title>
    <link href="http://yoursite.com/2019/04/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA-%E5%BE%85%E6%94%B9%E8%BF%9B/"/>
    <id>http://yoursite.com/2019/04/14/数据结构绪论-待改进/</id>
    <published>2019-04-14T09:11:19.000Z</published>
    <updated>2019-04-14T09:24:19.349Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="什么是数据结构"><a href="#什么是数据结构" class="headerlink" title="什么是数据结构"></a>什么是数据结构</h2><blockquote><p>程序 = 算法 + 数据结构<br>程序设计的实质,就是对 确定的问题 选择 一种好的结构 加上 一种好的算法。<br>数据结构是算法实现的基础, 算法总是要依赖于某种数据结构来实现<br><a id="more"></a></p></blockquote><h3 id="数据结构概述"><a href="#数据结构概述" class="headerlink" title="数据结构概述"></a>数据结构概述</h3><blockquote><p>1946年情人节，世界上第一台电脑ENIAC在美国宾夕法尼亚大学诞生<br>当时是用来进行计算弹道的, 当时计算机的研制主要用于数值计算。<br>发展到现在,计算机处理的数据也由纯粹的数值,发展到 字符, 表格, 图形, 图像, 声音等非数值的数据。</p></blockquote><h3 id="三种基本数据逻辑结构"><a href="#三种基本数据逻辑结构" class="headerlink" title="三种基本数据逻辑结构"></a>三种基本数据逻辑结构</h3><ul><li><p>线性结构: 一对一</p></li><li><p>树形结构: 一对多</p></li><li><p>图形结构: 多对多</p></li></ul><h2 id="算法概念"><a href="#算法概念" class="headerlink" title="算法概念"></a>算法概念</h2><blockquote><p>算法简单来说就是解决问题的方法。在计算机领域我们可以说算法是有限的指令序列。</p></blockquote><blockquote><p>算法的含义与程序十分相似, 但又有区别。程序中的指令必须是机器可执行的, 而算法中的指令则无此限制。</p></blockquote><blockquote><p>一个算法如果要程序设计语言来描述, 则它就是一个程序。</p></blockquote><h3 id="算法的特性"><a href="#算法的特性" class="headerlink" title="算法的特性"></a>算法的特性</h3><ul><li><p>0个或多个输入: 绝大多数的算法, 输入参数是必要的, 但是也有个别情况, 比如, 仅仅要求输出一段文字</p></li><li><p>至少有一个输出: 输出就是把结果呈现出来, 问题解决了,结果不呈现。有意义吗?</p></li><li><p>有穷性: 一个算法在执行有限步骤后可以呈现。不然会出现死循环</p></li><li><p>确定性: 算法的每一步都必须有确切的意义, 不会出现二义性</p></li><li><p>可行性: 算法中的每一步都是可行的, 每一步都能通过执行有限的次数完成。(也就是指算法可以转换成程序 在机器上运行 并得到正确的结果)</p></li></ul><h3 id="算法要求"><a href="#算法要求" class="headerlink" title="算法要求"></a>算法要求</h3><blockquote><p>一个好的算法应该具备以下四点要求</p></blockquote><ul><li><p>算法要正确: 算法的执行结果应当满足预先规定的功能和性能要求。</p></li><li><p>可读性: <strong>算法首先应该是便于人们理解和相互交流,其次才是机器可执行</strong>。所以一个算法应该思路清晰,层次分明.简单明了,易读易懂。</p></li><li><p>健壮性: 作为一个好的算法,当输入不合法的数据时, 应该适当的做出正确反应或进行相应的处理, 而不至于产生一些莫名其妙的输出结果。</p></li><li><p>高效率低存储: <strong>算法效率通常指算法的执行时间。</strong> 对于同一个问题如果有多个算法可以解决, 执行时间最短的效率最高。所谓存储量的要求,是指算法在执行过程中所产生的的最大存储空间。这两者都与问题的规模有关。</p></li></ul><h3 id="算法的描述"><a href="#算法的描述" class="headerlink" title="算法的描述"></a>算法的描述</h3><p><img src="/2019/04/14/数据结构绪论-待改进/算法的描述.jpg" alt="算法的描述"></p><h3 id="算法评价-算法效率的评价方法"><a href="#算法评价-算法效率的评价方法" class="headerlink" title="算法评价(算法效率的评价方法)"></a>算法评价(算法效率的评价方法)</h3><blockquote><p>少花时间, 少用空间<br>常说的算法效率, 大多指执行时间。</p></blockquote><ul><li>利用计算器,统计运行时间,从而确定算法效率的高低。(这种测试方式有很大的缺陷)</li></ul><ol><li><p>首先要使用算法编制好程序时才能测试算法效率,如果程序存在缺陷就会前功尽弃。</p></li><li><p>时间的比较又依赖于计算机的硬件和软件的坏境因素,有时会遮盖算法本身的优劣。</p></li><li><p>算法的测试数据, 算法的高效有时候和数据的规模有关, 效率高的算法在小规模的测试数据面前往往得不到体现。</p></li></ol><ul><li>估算法</li></ul><p><img src="/2019/04/14/数据结构绪论-待改进/算法效率评价.jpg" alt="算法评价"><br><img src="/2019/04/14/数据结构绪论-待改进/算法效率评价1.jpg" alt="算法评价"><br><img src="/2019/04/14/数据结构绪论-待改进/算法效率评价2.jpg" alt="算法评价"><br><img src="/2019/04/14/数据结构绪论-待改进/算法效率评价3.jpg" alt="算法评价"><br><img src="/2019/04/14/数据结构绪论-待改进/算法效率评价4.jpg" alt="算法评价"><br><img src="/2019/04/14/数据结构绪论-待改进/算法效率评价5.jpg" alt="算法评价"><br><img src="/2019/04/14/数据结构绪论-待改进/算法效率评价6.jpg" alt="算法评价"><br><img src="/2019/04/14/数据结构绪论-待改进/算法效率评价7.jpg" alt="算法评价"><br><img src="/2019/04/14/数据结构绪论-待改进/算法效率评价8.jpg" alt="算法评价"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;headerlink&quot; title=&quot;数据结构&quot;&gt;&lt;/a&gt;数据结构&lt;/h1&gt;&lt;h2 id=&quot;什么是数据结构&quot;&gt;&lt;a href=&quot;#什么是数据结构&quot; class=&quot;headerlink&quot; title=&quot;什么是数据结构&quot;&gt;&lt;/a&gt;什么是数据结构&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;程序 = 算法 + 数据结构&lt;br&gt;程序设计的实质,就是对 确定的问题 选择 一种好的结构 加上 一种好的算法。&lt;br&gt;数据结构是算法实现的基础, 算法总是要依赖于某种数据结构来实现&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法效率评价" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E6%95%88%E7%8E%87%E8%AF%84%E4%BB%B7/"/>
    
  </entry>
  
  <entry>
    <title>vue基础知识</title>
    <link href="http://yoursite.com/2019/04/13/vue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2019/04/13/vue基础知识/</id>
    <published>2019-04-13T14:01:14.000Z</published>
    <updated>2019-04-15T13:10:10.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue框架基础"><a href="#Vue框架基础" class="headerlink" title="Vue框架基础"></a><strong>Vue框架基础</strong></h1><h2 id="vue常见指令"><a href="#vue常见指令" class="headerlink" title="vue常见指令"></a><strong>vue常见指令</strong></h2><h3 id="v-cloak-v-html-v-text处理文本指令"><a href="#v-cloak-v-html-v-text处理文本指令" class="headerlink" title="v-cloak,v-html,v-text处理文本指令"></a><strong>v-cloak,v-html,v-text处理文本指令</strong></h3><ul><li><p><strong>文本闪烁问题:</strong> data中的属性等 会替换对应的 mustache插值 。但是如果没有请求到该数据的时候, mustache插值 会被显示到页面上。等到请求到数据之后页面上的插值表达式才会被 vue实例中的数据替换掉。</p></li><li><p><strong>v-cloak指令:</strong> 该指令会在请求到数据之后移除, 因此可以使用此指令解决文本闪烁问题。 </p></li><li><p><strong>v-html指令:</strong> 该指令类似于innerHTML,会把 v-html指令的值 作用在具有该指令的标签上,具有解析标签的功能。</p></li><li><p><strong>v-text:</strong> 同上述命令,类似于innerText属性。</p></li></ul><h3 id="v-bind指令"><a href="#v-bind指令" class="headerlink" title="v-bind指令:"></a><strong>v-bind指令:</strong></h3><blockquote><p>vue中的指令的属性值部分, 一般都会解析一个合法的JS表达式。但是普通的属性值部分,仍是一个字符串。</p></blockquote><p><strong>v-bind指令</strong> 可以让绑定的属性的值部分,解析一个合法的JS表达式。</p><p><strong>简写:</strong> v-bind: 可以简写为 : 例<code>v-bind:class=&quot;...&quot; ==&gt; :class=&quot;...&quot;</code></p><h3 id="v-on绑定事件指令"><a href="#v-on绑定事件指令" class="headerlink" title="v-on绑定事件指令:"></a><strong>v-on绑定事件指令:</strong></h3><p><strong>v-on指令</strong>用来注册事件,例:<code>onclick ==&gt; v-on:click</code></p><p><strong>简写:</strong> v-on指令 可以简写为 @ ,例: <code>v-on:click ==&gt; @click</code></p><blockquote><p><strong>注意:</strong> vue中事件调用的函数可以加括号也可以不加, js原生的事件中不可以不加括号。</p></blockquote><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a><strong>事件修饰符</strong></h3><ol><li><p><strong>.stop</strong> : 阻止冒泡</p></li><li><p><strong>.prevent</strong> : 阻止默认行为</p></li><li><p><strong>.cupture</strong> : 事件捕获期执行</p></li><li><p><strong>.self</strong> : 事件只作用在该元素本身</p></li><li><p><strong>.once</strong> : 事件只触发一次, 原理是执行完事件之后清除该事件。</p></li></ol><ul><li><p><strong>.stop 与 .self 的区别</strong></p><ul><li><p>self 指事件只作用在自己身上,并不会取消当前元素的冒泡行为。点击子元素不会触发该元素的,但是如果子元素有祖父元素,则会触发祖父元素的事件。</p></li><li><p>stop 阻止当前事件冒泡不会继续往上触发,但是子标签的冒泡会触发到该元素的事件</p></li></ul></li></ul><h3 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a><strong>按键修饰符</strong></h3><blockquote><p>vue内置的按键修饰符</p></blockquote><ul><li><p>.enter </p></li><li><p>.tab</p></li><li><p>.delete (捕获删除和回退键)</p></li><li><p>.esc</p></li><li><p>.space</p></li><li><p>.up</p></li><li><p>.down</p></li><li><p>.left</p></li><li><p>.right</p></li></ul><blockquote><p>没有内置的按键可以通过 Vue.config.keyCodes.按键名 = 按键码来设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.keyCodes.f2 = 123; ==&gt; 自定义按键修饰符</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="修饰符的顺序-存在疑问"><a href="#修饰符的顺序-存在疑问" class="headerlink" title="修饰符的顺序 ???存在疑问"></a><strong>修饰符的顺序</strong> ???存在疑问</h3><blockquote><p>使用多个修饰符的时候, 不同的顺序会有不同的效果, 例: </p></blockquote><h3 id="exact-修饰符"><a href="#exact-修饰符" class="headerlink" title="exact 修饰符"></a><strong>exact 修饰符</strong></h3><blockquote><p>.exact 修饰符允许你控制由精确的系统修饰符组合触发的事件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 即使 Alt 或 Shift 被一同按下时也会触发 --&gt;</span><br><span class="line">&lt;button @click.ctrl=&quot;onClick&quot;&gt;A&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 有且只有 Ctrl 被按下的时候才触发 --&gt;</span><br><span class="line">&lt;button @click.ctrl.exact=&quot;onCtrlClick&quot;&gt;A&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 没有任何系统修饰符被按下的时候才触发 --&gt;</span><br><span class="line">&lt;button @click.exact=&quot;onClick&quot;&gt;A&lt;/button&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a><strong>v-model</strong></h3><blockquote><p>作用随表单元素类型不同而不同<br>现表单输入和vue 实例数据之间的双向绑定。<br>只适用于:<code>&lt;input&gt;</code> <code>&lt;select&gt;</code> <code>&lt;textarea&gt;</code> components</p></blockquote><p><strong>修饰符:</strong> </p><pre><code>- .lazy 取代 input 监听 change事件- .number 输入字符串转为有效数字- .trim 过滤输入字符的首位空格</code></pre><p><strong>v-model表单应用</strong></p><ol><li><p>通过 Ajax 可以不使用name属性就可以提交, v-model相同的可以看为一组。(原理是value和v-model的关系)</p></li><li><p>下拉列表的value值,是该下拉列表中options的value值, 一般把v-model绑定给select</p></li><li><p>使用display:none隐藏,然后让该option为选中项,值仍然会显示在下拉框中,但是下拉列表中是隐藏的;</p></li><li><p>如果提交为disabled的标签, 当作默认选项提交, 不会提交数据即url?后啥都没有;</p></li></ol><h3 id="v-bind-应用多个class"><a href="#v-bind-应用多个class" class="headerlink" title="v-bind:应用多个class"></a><strong>v-bind:应用多个class</strong></h3><ul><li><p><strong>数组写法1:</strong> class=”[‘thin’,’red’,’active’]”</p></li><li><p><strong>数组写法2:</strong> class=”[‘thin’,’red’,{active:flag}]”</p></li><li><p><strong>数组写法3:</strong> class=”[‘thin’,’red’,flag?’active’:’’]”</p></li><li><p><strong>对象写法1:</strong> class=”{thin:true , red:true , active:true}”</p></li><li><p><strong>注意:</strong> 没有使用v-bind绑定的class 可以 和绑定的class叠加, 而不是覆盖</p></li></ul><h3 id="v-bind-应用多个style"><a href="#v-bind-应用多个style" class="headerlink" title="v-bind:应用多个style"></a><strong>v-bind:应用多个style</strong></h3><ul><li><p><strong>数组写法:</strong> style=”[{color:’red’}{‘font-size’:’20px’}]”</p></li><li><p><strong>对象写法:</strong> style=”{color:’red’,fontSize:’20px’}”</p></li></ul><blockquote><p><strong>注意:</strong> 如果属性名直接写成font-size 的形式要加引号,如果写成驼峰命名的形式可以不加引号</p></blockquote><h3 id="v-for遍历的四种方法"><a href="#v-for遍历的四种方法" class="headerlink" title="v-for遍历的四种方法"></a><strong>v-for遍历的四种方法</strong></h3><ol><li><p><strong>遍历数组</strong> <code>v-for=&quot;(item,index) in arr&quot;</code></p></li><li><p><strong>遍历数组对象</strong> <code>v-for=&quot;(user,index) in userArr&quot;</code></p></li><li><p><strong>遍历对象</strong> <code>v-for=&quot;(val,key,index) in users&quot;</code></p><blockquote><p><strong>注意：</strong> 值在前，键在后，对象是无序排列不建议使用index</p></blockquote></li><li><p><strong>遍历数字</strong> <code>v-for=&quot;(count,index) in 10&quot;</code></p><blockquote><p><strong>注意:</strong> 遍历数字下标从0开始, 但是元素是从1开始</p></blockquote></li></ol><h3 id="key"><a href="#key" class="headerlink" title="key"></a><strong>key</strong></h3><p><code>key</code> 用来确保遍历数据的唯一性, 例: 如果使用v-for遍历数组的时候, 向数组的前面添加了一个元素, 如果第i个身上绑定了数据, 由于vue组件高度复用的特性, 那么在前面添加了一个元素之后, 可能数据会按照索引绑定到前面的一个身上</p><blockquote><p><strong>注意:</strong> key值只能是 Number 和String类型</p></blockquote><h3 id="v-if-和-v-show"><a href="#v-if-和-v-show" class="headerlink" title="v-if 和 v-show"></a><strong>v-if 和 v-show</strong></h3><ul><li><p><strong>v-if, v-else-if, v-else</strong> v-if 每次都会删除或创建元素, 消耗很大的切换性能, 如果元素频繁切换, 建议使用v-show</p></li><li><p><strong>v-show, v-hide</strong> v-show 操作元素的display:nona/block, 有较高的初始渲染消耗, 如果元素很少显示出来 被用户看到推荐用v-if</p></li></ul><hr><h2 id="data"><a href="#data" class="headerlink" title="data"></a>data</h2><blockquote><p>vue 中的数据 在vue的控制区域都可以使用</p></blockquote><ol><li><p>如果修改了data中的数据, 会自动渲染到页面上</p></li><li><p><strong>数组的不可检测问题:</strong> </p></li></ol><p><strong>问题1:</strong> 如果使用length属性清空data中的数据, vue不会检测到, 因此也不会同步到页面上<br><strong>方法:</strong> 不使用length属性 让数组等于空数组, 而不是让length等于0;</p><p><strong>问题2:</strong> 使用数据的索引下标修改值, 也不会同步到页面上, vue不能检测<br><strong>方法1:</strong> 使用splice方法替换掉要修改下标的元素</p><h2 id="方法2-使用vue-的强制响应方法-Vue-set-vue-item-index-newVal"><a href="#方法2-使用vue-的强制响应方法-Vue-set-vue-item-index-newVal" class="headerlink" title="方法2: 使用vue 的强制响应方法 Vue.set(vue.item ,index, newVal)"></a><strong>方法2:</strong> 使用vue 的强制响应方法 Vue.set(vue.item ,index, newVal)</h2><h2 id="混入mixin"><a href="#混入mixin" class="headerlink" title="混入mixin"></a>混入mixin</h2><blockquote><p>可以把局部的 代码块(应该可以是任何属性的代码块包括组件) 组装到某个组件内部使用, vue会把混入中的 相同属性(data,methods,…这些属性) 和 组件对象合并</p></blockquote><blockquote><p>混入中的数据在和组件中的数据发生冲突时, 以组件数据优先。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var mixin = &#123;</span><br><span class="line">    methods:&#123;</span><br><span class="line">        foo()&#123;</span><br><span class="line">            console.log(&apos;mixin的方法&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">    mixins:[mixin]   --&gt;  此时, vue实例中就包含了foo方法</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><hr><h2 id="自定义指令directive"><a href="#自定义指令directive" class="headerlink" title="自定义指令directive"></a>自定义指令directive</h2><p>当你不得不进行 dom 操作的识货, 就需要使用自定义指令</p><p>使用 directive 属性自定义指令, 例: v-focus </p><ul><li>全局指令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(focus,&#123;</span><br><span class="line"></span><br><span class="line">    // 当指令插入到节点中去的时候调用, 此时该节点还没有插入到 dom 树中,只 执行一次 </span><br><span class="line">    bind()&#123;&#125;, </span><br><span class="line"></span><br><span class="line">    // 当指令插入 dom 树中的时候调用[ 触发一次 ]</span><br><span class="line">    inserted()&#123;&#125;,</span><br><span class="line"></span><br><span class="line">    // 当dom节点更新的时候, 触发, 可能会触发多次</span><br><span class="line">    updated()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    // 大多数, 我们只会在 bind 和 update 钩子上做重复动作, 并不会关心其他的钩子函数 </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p>如果你不清除需要在哪个钩子函数上触发指令, 就可以使用 回调函数参数 替代 对象参数, 这就等于在每个生命周期都写了该回调函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(focus,function()&#123;...&#125;);</span><br></pre></td></tr></table></figure></p><ul><li>局部指令定义在 Vue实例的 directives的属性中<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">directives:&#123;</span><br><span class="line">    // 当你不清除 指令应该在哪个生命周期钩子中触发,可以使用 指令()&#123;&#125; 的形式</span><br><span class="line">    focus:&#123; bind()&#123;&#125;,...&#125; || focus()&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>回调函数或生命周期钩子中的参数</strong></p><ol><li><p>el, 绑定该指令的对象</p></li><li><p>binging, 一个对象包含以下参数</p><ul><li><p>value: 指令绑定对象的值</p></li><li><p>modifiers: 一个包含了 指令修饰符的 对象, 例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v-focus.name.age</span><br><span class="line">--&gt; </span><br><span class="line">modifiers:&#123;name:true,age:true&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><ol><li><strong>过滤器基本使用:</strong> <blockquote><p>过滤器一般用于 mustache插值 和 v-bind表达式 的过滤</p></blockquote></li></ol><blockquote><p>可以调用多个过滤器, 第二个过滤器会处理第一个过滤后的结果, 调用时加不加括号都可以;</p></blockquote><p>基本使用: </p><ul><li><p>步骤1: 在 mustache插值 和 v-bind表达式 中, 以管道符 | 调用过滤器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;&#123;&#123;msg | msgFilter(&apos;替换的内容&apos;) | morefilter &#125;&#125; &lt;/p&gt;</span><br></pre></td></tr></table></figure></li><li><p>步骤2: 定义过滤器</p></li></ul><p><strong>全局过滤器</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// filter 第一个 是要过滤的数据, 第二个参数是一个回调函数</span><br><span class="line">// 回调函数第一个参数是要过滤的数据, 后面跟的是自定义参数</span><br><span class="line"></span><br><span class="line">Vue.filter(&apos;msgFilter&apos;,function(msg,args)&#123;</span><br><span class="line">    return msg+args;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>局部过滤器</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">    filters:&#123; // 局部过滤器</span><br><span class="line">        过滤器名称:function(msg)&#123;</span><br><span class="line">            return msg+&apos;xixi&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><hr><h2 id="侦听器watch"><a href="#侦听器watch" class="headerlink" title="侦听器watch"></a>侦听器watch</h2><blockquote><p>watch 用来侦听 vue实例中数据的变化, 当需要在数据变化时执行异步(例如Ajax请求)或开销比较大的操作时, 这个方式是最有用的。应该是可以用来监听实例中的所有数据和属性, 路由中的路径变化可以通过监听<code>$route.path</code>监听路由路径的改变。</p></blockquote><hr><h2 id="计算属性-computed"><a href="#计算属性-computed" class="headerlink" title="计算属性 computed"></a>计算属性 computed</h2><blockquote><p>在computed(计算属性) 中, 可以定义一些方法, 这些方法一般作为属性使用。在使用的时候直接调用名称,并不会把计算属性当做方法使用。</p></blockquote><blockquote><p>计算属性调用的时候不能加括号, 属性值不可修改, 在页面中同样不可修改, 但是计算属性的值, 取决于 data 中的数据, 因此可以通过data中的数据来改变。</p></blockquote><blockquote><p>计算属性是基于它们的响应式依赖进行缓存的。只有在相关的响应式数据改变时,他才会重新求职。也就是说,如果依赖的 data 中的数据没有改变, 都不会重新调用计算机属性的方法(额也就是不会调用它的get函数)。而是直接返回缓存的结果。</p></blockquote><blockquote><p>计算属性作为一个函数, 它的函数部分, 赋值给了get函数</p></blockquote><blockquote><p>计算属性的值, 必要时候可以通过set函数来改变</p></blockquote><h3 id="监听器、计算属性-和-methods"><a href="#监听器、计算属性-和-methods" class="headerlink" title="监听器、计算属性 和 methods"></a>监听器、计算属性 和 methods</h3><ol><li><p>计算属性, 本质是方法, 但是作为属性使用, 计算属性的结果不会被缓存, 值也不能被改变。但是计算属性如果是一个对象则修改它的属性也不会报错。</p></li><li><p>methods 方法表示具体的功能, 一般用来处理业务逻辑。</p></li><li><p>watch 用来监听某些特定的值, 键是监听的表达式, 值是回调函数, 用来处理监听后的业务逻辑, 有点类似computed和methods 功能的结合, 一般可用于监听路由地址改变后的业务逻辑。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue框架基础&quot;&gt;&lt;a href=&quot;#Vue框架基础&quot; class=&quot;headerlink&quot; title=&quot;Vue框架基础&quot;&gt;&lt;/a&gt;&lt;strong&gt;Vue框架基础&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;vue常见指令&quot;&gt;&lt;a href=&quot;#vue常见指令&quot; 
      
    
    </summary>
    
      <category term="vue框架" scheme="http://yoursite.com/categories/vue%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>flex布局</title>
    <link href="http://yoursite.com/2019/04/12/flex%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2019/04/12/flex布局/</id>
    <published>2019-04-12T13:46:23.000Z</published>
    <updated>2019-04-14T09:25:35.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flex-布局"><a href="#Flex-布局" class="headerlink" title="Flex 布局"></a>Flex 布局</h1><blockquote><p><strong>网页布局</strong> (layout) 是 CSS 的一个重点应用。布局的传统解决方法, 基于盒状模型(margin,padding…), 依赖display 属性 + position 属性 + float 属性。紧紧是垂直居中就不容易实现。</p></blockquote><blockquote><p><strong>flex布局</strong> Flex布局将成为未来布局的首选方案。<br><a id="more"></a></p></blockquote><h2 id="一、什么是Flex布局"><a href="#一、什么是Flex布局" class="headerlink" title="一、什么是Flex布局:"></a>一、什么是Flex布局:</h2><blockquote><p>设为flex布局以后, 子元素的float, clear, vertical-align属性将失效</p></blockquote><p>任何一个容器都可以指定为flex布局<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">    display:flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>行内元素也可以使用Flex布局<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">    display:inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Webkit 内核的浏览器，必须要加上 -webkit 前缀<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">    display: -webkit-flex; /* safari */</span><br><span class="line">    display: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h2><blockquote><p>采用Flex布局的元素, 成为Flex 容器(flex container), 简称 “容器”。它的所有子元素都会自动成为容器成员, 成为Flex 项目(flex item), 简称 “项目”。</p></blockquote><blockquote><p>容器默认存在两根轴：水平方向的轴（main axis）和垂直的交叉轴（cross axis）。主轴开始位置与边框的交叉点叫做 main start，结束为止叫做 main end；交叉轴的开始位置叫做 cross start，结束位置叫做cross end。</p></blockquote><blockquote><p>项目默认沿主轴排列。单个项目占据主轴空间叫做 main size，占据的交叉轴空间叫做cross size。</p></blockquote><p><img src="/2019/04/12/flex布局/容器结构.jpg" alt="容器结构"></p><hr><h2 id="三、容器的属性"><a href="#三、容器的属性" class="headerlink" title="三、容器的属性"></a>三、容器的属性</h2><ul><li><p>flex-direction</p></li><li><p>flex-wrap</p></li><li><p>flex-flow</p></li><li><p>justify-content</p></li><li><p>align-items</p></li><li><p>align-content</p></li></ul><h3 id="3-1-flex-direction-属性"><a href="#3-1-flex-direction-属性" class="headerlink" title="3.1 flex-direction 属性"></a>3.1 flex-direction 属性</h3><p>flex-direction 属性决定主轴的方向(即项目排列的方向)</p><p><img src="/2019/04/12/flex布局/flex-direction属性.jpg" alt="flex-direction属性"></p><p>它可能有四个值:</p><ul><li><p>row(默认值) :主轴位水平方向, 起点在左端</p></li><li><p>row-reverse :主轴在水平方向, 起点在右端</p></li><li><p>column :主轴在垂直方式, 起点在上端</p></li><li><p>column-reverse :主轴在垂直方式, 起点在下端</p></li></ul><h3 id="3-2-flex-wrap"><a href="#3-2-flex-wrap" class="headerlink" title="3.2 flex-wrap"></a>3.2 flex-wrap</h3><p>默认情况下,项目都排在一条线(又称 轴线 )上。 flex-wrap 属性定义, 如果一条线排不下,如何换行。</p><p>它可能取三个值</p><ul><li>nowrap (默认) 不换行: 会挤压盒子的宽高; </li></ul><p><img src="/2019/04/12/flex布局/不换行.jpg" alt="不换行"></p><ul><li>wrap 换行, 多余的往下排</li></ul><p><img src="/2019/04/12/flex布局/wrap.jpg" alt="wrap"></p><ul><li>wrap-reverse 换行, 但是多余的往上排</li></ul><p><img src="/2019/04/12/flex布局/wrap-reverse.jpg" alt="wrap-reverse"></p><h3 id="3-3-flex-flow属性"><a href="#3-3-flex-flow属性" class="headerlink" title="3.3 flex-flow属性"></a>3.3 flex-flow属性</h3><p>flex-flow属性 是对 flex-direction属性 和 flex-wrap属性 的简写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flex-flow: flex-direction || flex-wrap</span><br></pre></td></tr></table></figure></p><h3 id="3-4-justify-content"><a href="#3-4-justify-content" class="headerlink" title="3.4 justify-content"></a>3.4 justify-content</h3><p>justify-content 属性 定义了项目在主轴上的对齐方式</p><ul><li><p>flex-start 从start向end排列, 类似于flex-direction:row;</p></li><li><p>flex-end 从end向start排列, 类似于flex-direction: row-reverse;</p></li><li><p>center 项目居中</p></li><li><p>space-between 两侧紧贴, 项目之间的间隔都相等</p></li><li><p>space-around 项目之间的间隔都相等。所以项目之间的间隔比项目与边框之间的间隔大一倍。</p></li></ul><p><img src="/2019/04/12/flex布局/justify-content.jpg" alt="justify-content.jpg"></p><h3 id="3-5-align-item-属性"><a href="#3-5-align-item-属性" class="headerlink" title="3.5 align-item 属性"></a>3.5 align-item 属性</h3><p>align-item 属性, 定义项目在交叉轴上如何对齐</p><ul><li><p>flex-start, 从交叉轴的start开始向下排列 的start</p></li><li><p>flex-end, 交叉轴的终点对齐。</p></li><li><p>center, 交叉轴的中点对齐</p></li><li><p>baseline, 项目中第一行文字的基线对齐</p></li><li><p>stretch, 如果项目未设置高度或者 auto, 将沾满整个容器的高度。</p></li></ul><h3 id="3-6-align-content属性"><a href="#3-6-align-content属性" class="headerlink" title="3.6 align-content属性"></a>3.6 align-content属性</h3><p>align-content属性定义了主轴方向上多条轴线时, 项目子在交叉轴方向上的对齐方式</p><ul><li><p>flex-start, 从交叉轴的</p></li><li><p>flex-end</p></li><li><p>center</p></li><li><p>space-between</p></li><li><p>space-around</p></li><li><p>stretch</p></li></ul><p><img src="/2019/04/12/flex布局/align-content.png" alt="align-content"></p><hr><h2 id="四、项目属性"><a href="#四、项目属性" class="headerlink" title="四、项目属性"></a>四、项目属性</h2><ul><li><p>order</p></li><li><p>flex-grow</p></li><li><p>flex-shrink</p></li><li><p>flex-basis</p></li><li><p>flex</p></li><li><p>align-self</p></li></ul><h3 id="4-1-order-属性"><a href="#4-1-order-属性" class="headerlink" title="4.1 order 属性"></a>4.1 order 属性</h3><p><code>order</code>属性定义项目的排列顺序。项目越小排列越靠前,默认为0;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例：order: &lt;int&gt;</span><br></pre></td></tr></table></figure></p><p><img src="/2019/04/12/flex布局/order.jpg" alt="order"></p><h3 id="4-2-flex-grow属性"><a href="#4-2-flex-grow属性" class="headerlink" title="4.2 flex-grow属性"></a>4.2 flex-grow属性</h3><blockquote><p>如果所有项目都为1的话, 它们将等分项目空间, 如果有一个项目为2, 其余项目为1的话, 则前者占据剩余空间将比其他项目多一倍。</p></blockquote><p><code>flex-grow</code>属性 定义项目的放大比例, 如果容易中有足够大的空间, 会结合比例进行放大。默认为0 ,即有足够的空间也不放大。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flex-grow:&lt;int&gt;</span><br></pre></td></tr></table></figure><h3 id="4-3-flex-shrink-属性"><a href="#4-3-flex-shrink-属性" class="headerlink" title="4.3 flex-shrink 属性"></a>4.3 flex-shrink 属性</h3><blockquote><p>如果所有项目为1, 当容器空间不足时,都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为0, 其他都为1 ,当容器空间不足, 其他都缩小时, 它不变。</p></blockquote><blockquote><p>负值对该属性无效。</p></blockquote><p><code>flex-shrink</code> 属性定义了项目的缩小比例,默认为1, 如果容器空间不如, 该项目将缩小。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flex-shrink:&lt;int&gt;</span><br></pre></td></tr></table></figure><h3 id="4-4-flex-basis-属性"><a href="#4-4-flex-basis-属性" class="headerlink" title="4.4 flex-basis 属性"></a>4.4 flex-basis 属性</h3><p><code>flex-basis</code>属性定义了在分配多余空间之前, 项目占据主轴空间(main size)。浏览器根据这个属性,计算主轴是否有多余空间。它的默认值为auto, 即项目的本来大小。</p><blockquote><p>该属性如果设置成数值, 将占据固定空间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flex-basis: 数值||auto;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="4-5-flex属性"><a href="#4-5-flex属性" class="headerlink" title="4.5 flex属性"></a>4.5 flex属性</h3><p><code>flex</code> 属性是 <code>flex-grow</code>,<code>flex-shrink</code>,<code>flex-basis</code>的简写, 默认值为<code>0 1 auto</code>。后两个属性可选。 </p><blockquote><p>该属性有两个快捷值, auto ==&gt; ( 1 1 auto ), none ==&gt; ( 0 0 auto )</p></blockquote><blockquote><p>建议有限使用这个属性, 而不是分开使用 <code>flex-grow</code> <code>flex-shrink</code>和 <code>flex-basis</code>, 因为浏览器会推算默认值。</p></blockquote><h3 id="4-6-align-self属性"><a href="#4-6-align-self属性" class="headerlink" title="4.6 align-self属性"></a>4.6 align-self属性</h3><p><code>align-self</code> 属性允许单个项目有与其他项目不同的对齐方式, 可以覆盖<code>align-item</code> 属性。默认值为<code>auto</code>, 表示继承父元素的<code>align-item属性</code>,如果没有,则等同于stretch</p><blockquote><p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p></blockquote><p><img src="/2019/04/12/flex布局/align-self.jpg" alt="align-self"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Flex-布局&quot;&gt;&lt;a href=&quot;#Flex-布局&quot; class=&quot;headerlink&quot; title=&quot;Flex 布局&quot;&gt;&lt;/a&gt;Flex 布局&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;网页布局&lt;/strong&gt; (layout) 是 CSS 的一个重点应用。布局的传统解决方法, 基于盒状模型(margin,padding…), 依赖display 属性 + position 属性 + float 属性。紧紧是垂直居中就不容易实现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;flex布局&lt;/strong&gt; Flex布局将成为未来布局的首选方案。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
      <category term="flex" scheme="http://yoursite.com/tags/flex/"/>
    
  </entry>
  
</feed>
