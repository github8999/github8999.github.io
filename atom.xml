<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>生命1昊</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-25T13:07:33.608Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>_日天昊</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入学习css</title>
    <link href="http://yoursite.com/2019/06/25/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0css/"/>
    <id>http://yoursite.com/2019/06/25/深入学习css/</id>
    <published>2019-06-25T12:55:31.000Z</published>
    <updated>2019-06-25T13:07:33.608Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入学习CSS"><a href="#深入学习CSS" class="headerlink" title="深入学习CSS"></a>深入学习CSS</h1><blockquote><p>注意: 语法兼容时, 标准语法必须在最后。</p></blockquote><h2 id="CSS函数"><a href="#CSS函数" class="headerlink" title="CSS函数"></a>CSS函数</h2><ol><li><p>attr(): 返回元素的属性值(兼容IE8必须有文档声明) css2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    a:after&#123;</span><br><span class="line">        content:attr(href); <span class="comment">// 可以进行字符串拼接</span></span><br><span class="line">        <span class="comment">// content: "("attr(href)")"; 两边拼接上字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;a href="https:/</span><span class="regexp">/www.baidu.com"&gt;百度&lt;/</span>a&gt;</span><br></pre></td></tr></table></figure></li><li><p>calc(): 用于动态计算长度值。(css3支持版本, 支持ie9)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    div&#123;</span><br><span class="line">        width: calc(<span class="number">100</span>% - <span class="number">10</span>px)；<span class="comment">//运算符前后都需要保留一个空格</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>linear-gradient()    创建一个线性渐变的图像    css3(兼容ie10)</p></li><li>radial-gradient()    用径向渐变创建图像。    css3(兼容ie10)</li><li>repeating-linear-gradient()    用重复的线性渐变创建图像。    css3(兼容ie10)</li><li>repeating-radial-gradient() css3(兼容ie10)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;深入学习CSS&quot;&gt;&lt;a href=&quot;#深入学习CSS&quot; class=&quot;headerlink&quot; title=&quot;深入学习CSS&quot;&gt;&lt;/a&gt;深入学习CSS&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;注意: 语法兼容时, 标准语法必须在最后。&lt;/p&gt;
&lt;/blockquot
      
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序起步</title>
    <link href="http://yoursite.com/2019/06/22/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%B5%B7%E6%AD%A5/"/>
    <id>http://yoursite.com/2019/06/22/微信小程序起步/</id>
    <published>2019-06-22T06:58:58.000Z</published>
    <updated>2019-06-22T07:12:01.164Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微信小程序起步"><a href="#微信小程序起步" class="headerlink" title="微信小程序起步"></a>微信小程序起步</h1><h2 id="appid"><a href="#appid" class="headerlink" title="appid"></a>appid</h2><h2 id="app-json-和-page-json"><a href="#app-json-和-page-json" class="headerlink" title="app.json 和 page.json"></a>app.json 和 page.json</h2><blockquote><p>如果 <code>app.json</code> 和 <code>page.json</code> 中的配置项重复了, 那么 <code>page</code> 的配置项会覆盖掉 全局 的配置。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;微信小程序起步&quot;&gt;&lt;a href=&quot;#微信小程序起步&quot; class=&quot;headerlink&quot; title=&quot;微信小程序起步&quot;&gt;&lt;/a&gt;微信小程序起步&lt;/h1&gt;&lt;h2 id=&quot;appid&quot;&gt;&lt;a href=&quot;#appid&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="微信小程序" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>es6</title>
    <link href="http://yoursite.com/2019/06/17/es6/"/>
    <id>http://yoursite.com/2019/06/17/es6/</id>
    <published>2019-06-17T13:54:44.000Z</published>
    <updated>2019-06-17T14:36:48.441Z</updated>
    
    <content type="html"><![CDATA[<h1 id="es6"><a href="#es6" class="headerlink" title="es6"></a>es6</h1><h2 id="1-块级作用域"><a href="#1-块级作用域" class="headerlink" title="1 块级作用域"></a>1 块级作用域</h2><p>ES6(ES2015) 中提出了块级作用域的概念</p><ul><li>let 的使用规则</li></ul><ol><li><p>let 声明的变量不会被变量提升</p></li><li><p>let 不可以在同一个作用域中重复声明变量</p></li><li><p>let 声明的变量会区分块状作用域( <code>{}</code>大括号包裹起来的代码块都表示为块状作用域 );</p></li></ol><ul><li>const 的使用规则</li></ul><ol><li><p>const 一般用来声明常量, 使用 const 定义的常量不能修改(对象则是不能修改引用)</p></li><li><p>const 定义的变量必须被初始化</p></li></ol><h2 id="2-参数的默认值问题"><a href="#2-参数的默认值问题" class="headerlink" title="2 参数的默认值问题"></a>2 参数的默认值问题</h2><p>传统的默认值存在的问题<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">temp</span>)</span>&#123;</span><br><span class="line">    temp = temp || <span class="number">20</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果 <code>temp</code> 为 <code>0</code> 或 <code>&#39;&#39;</code> 时, 也表示为 <code>false</code>, 因此结果会返回 <code>20</code>。  </p><p><code>ES6</code> 默认值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"> temp = <span class="number">20</span> </span>)</span>&#123; ... &#125; <span class="comment">// 如果没有传递参数, 则temp为20</span></span><br></pre></td></tr></table></figure></p><h2 id="3-模板字符串"><a href="#3-模板字符串" class="headerlink" title="3 模板字符串"></a>3 模板字符串</h2><p>ES6中的模板字符串解决了字符串不能换行书写的问题, 且可以使用 <code>${}</code> 代替加号进行拼接<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;<span class="subst">$&#123;<span class="string">'这是一个demo'</span>&#125;</span>&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div&gt;<span class="subst">$&#123;<span class="string">'这是一个demo2'</span>&#125;</span>&lt;/div&gt;`</span></span><br></pre></td></tr></table></figure></p><h2 id="4-解构赋值"><a href="#4-解构赋值" class="headerlink" title="4 解构赋值"></a>4 解构赋值</h2><ol><li><p>数组的结构赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> [a, b, c, d ] = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]  ==&gt; <span class="keyword">var</span> a = <span class="number">1</span> , b = <span class="number">2</span>, c = <span class="number">3</span>, d = <span class="number">4</span></span><br><span class="line"><span class="keyword">var</span> [ a, b, c = <span class="number">3</span> , d ] = [<span class="number">1</span>, <span class="number">2</span>, ,<span class="number">4</span> ] ==&gt; 按照对应的下标赋值, 没有的为<span class="literal">undefined</span>或默认值</span><br></pre></td></tr></table></figure></li><li><p>对象结构赋值(类似于数组)</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123; name, age &#125; = &#123; <span class="attr">name</span>: <span class="string">'zhangsan'</span>, <span class="attr">age</span>: <span class="number">20</span> &#125; <span class="comment">// 变量的标识符必须和对象属性的标识符一致</span></span><br><span class="line"><span class="keyword">var</span> &#123; <span class="attr">name</span>: namenew&#125; =  &#123; <span class="attr">name</span>: <span class="string">'zhangsan'</span>, <span class="attr">age</span>: <span class="number">20</span> &#125; <span class="comment">// 也可以给变量起个别名</span></span><br><span class="line"><span class="keyword">var</span> &#123; <span class="attr">name</span>: namenew = <span class="string">'张三'</span>&#125; = &#123;&#125; <span class="comment">// 也可以同时存在默认值和别名</span></span><br><span class="line"><span class="keyword">var</span> &#123; max, min &#125; = <span class="built_in">Math</span> <span class="comment">// 也可以获取工具类中的方法</span></span><br></pre></td></tr></table></figure><ol start="3"><li>字符串解构赋值(同数组)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> [a,b,c,d,e] = <span class="string">'12345'</span></span><br><span class="line"><span class="keyword">var</span> &#123;length&#125; = <span class="string">'12345'</span> <span class="comment">// 也可以获取到字符串的长度</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="5-对象属性赋值缩写"><a href="#5-对象属性赋值缩写" class="headerlink" title="5 对象属性赋值缩写"></a>5 对象属性赋值缩写</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>: name&#125; 可以简写为 ==&gt; <span class="keyword">var</span> obj = &#123;name&#125; </span><br><span class="line">say: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125; 可以简写为 ==&gt; say() &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="6-字符串相关扩展"><a href="#6-字符串相关扩展" class="headerlink" title="6 字符串相关扩展"></a>6 字符串相关扩展</h2><ol><li>includes() 判断字符串中是否包含某个字符出纳</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;es6&quot;&gt;&lt;a href=&quot;#es6&quot; class=&quot;headerlink&quot; title=&quot;es6&quot;&gt;&lt;/a&gt;es6&lt;/h1&gt;&lt;h2 id=&quot;1-块级作用域&quot;&gt;&lt;a href=&quot;#1-块级作用域&quot; class=&quot;headerlink&quot; title=&quot;1 块级作用域
      
    
    </summary>
    
      <category term="JS基础" scheme="http://yoursite.com/categories/JS%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="es6" scheme="http://yoursite.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>无形装逼,最为致命</title>
    <link href="http://yoursite.com/2019/06/17/%E6%97%A0%E5%BD%A2%E8%A3%85%E9%80%BC-%E6%9C%80%E4%B8%BA%E8%87%B4%E5%91%BD/"/>
    <id>http://yoursite.com/2019/06/17/无形装逼-最为致命/</id>
    <published>2019-06-17T13:43:22.000Z</published>
    <updated>2019-06-17T13:54:23.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="装逼的代码写法"><a href="#装逼的代码写法" class="headerlink" title="装逼的代码写法"></a>装逼的代码写法</h1><ol><li><p>数组去重</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [...new <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>])]</span><br></pre></td></tr></table></figure></li><li><p>快速创建特定大小的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [...Array(num).keys()]</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;装逼的代码写法&quot;&gt;&lt;a href=&quot;#装逼的代码写法&quot; class=&quot;headerlink&quot; title=&quot;装逼的代码写法&quot;&gt;&lt;/a&gt;装逼的代码写法&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;数组去重&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;ta
      
    
    </summary>
    
      <category term="JS基础" scheme="http://yoursite.com/categories/JS%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="简化代码" scheme="http://yoursite.com/tags/%E7%AE%80%E5%8C%96%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>解决客户端浏览器缓存问题</title>
    <link href="http://yoursite.com/2019/06/17/%E8%A7%A3%E5%86%B3%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/06/17/解决客户端浏览器缓存问题/</id>
    <published>2019-06-17T13:36:32.000Z</published>
    <updated>2019-06-17T13:40:13.677Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决客户端浏览器缓存问题"><a href="#解决客户端浏览器缓存问题" class="headerlink" title="解决客户端浏览器缓存问题"></a>解决客户端浏览器缓存问题</h1><blockquote><p>当一个网站更新了一些图片之后, 如何更新老版本的图片在客户端浏览器中的缓存</p></blockquote><p>可以通过给url加参数的形式解决<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src = <span class="string">'url?date = 2019/6/17'</span>&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;解决客户端浏览器缓存问题&quot;&gt;&lt;a href=&quot;#解决客户端浏览器缓存问题&quot; class=&quot;headerlink&quot; title=&quot;解决客户端浏览器缓存问题&quot;&gt;&lt;/a&gt;解决客户端浏览器缓存问题&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;当一个网站更新了一些图片之后, 如
      
    
    </summary>
    
      <category term="缓存问题" scheme="http://yoursite.com/categories/%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="更新缓存" scheme="http://yoursite.com/tags/%E6%9B%B4%E6%96%B0%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>实现深拷贝的几种方式</title>
    <link href="http://yoursite.com/2019/06/17/%E5%AE%9E%E7%8E%B0%E6%B7%B1%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/06/17/实现深拷贝的几种方式/</id>
    <published>2019-06-17T13:18:30.000Z</published>
    <updated>2019-06-17T13:26:25.662Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实现深拷贝的几种方式"><a href="#实现深拷贝的几种方式" class="headerlink" title="实现深拷贝的几种方式"></a>实现深拷贝的几种方式</h1><h2 id="1-数组和对象通用的方式-小程序可用"><a href="#1-数组和对象通用的方式-小程序可用" class="headerlink" title="1 数组和对象通用的方式(小程序可用)"></a>1 数组和对象通用的方式(小程序可用)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">attr</span>:&#123;&#125;&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj))</span><br><span class="line"><span class="built_in">console</span>.log(obj == obj1) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.attr == obj1.attr) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="2-数组的深拷贝"><a href="#2-数组的深拷贝" class="headerlink" title="2 数组的深拷贝"></a>2 数组的深拷贝</h2><blockquote><p>下列方式可能不适合小程序<br>伪数组可以通过 <code>Array.prototype.方法名.call()</code> 的方式使用</p><ol><li>concat()<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [[],[],[]]</span><br><span class="line"><span class="keyword">var</span> arr1 = arr.concat()</span><br></pre></td></tr></table></figure></li></ol></blockquote><ol start="2"><li><p>slice()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [[],[],[]]</span><br><span class="line"><span class="keyword">var</span> arr1 = arr.slice(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li><p>es6</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [[],[],[]]</span><br><span class="line"><span class="keyword">var</span> arr1 = [...arr]</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;实现深拷贝的几种方式&quot;&gt;&lt;a href=&quot;#实现深拷贝的几种方式&quot; class=&quot;headerlink&quot; title=&quot;实现深拷贝的几种方式&quot;&gt;&lt;/a&gt;实现深拷贝的几种方式&lt;/h1&gt;&lt;h2 id=&quot;1-数组和对象通用的方式-小程序可用&quot;&gt;&lt;a href=&quot;#1-数
      
    
    </summary>
    
      <category term="深拷贝" scheme="http://yoursite.com/categories/%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    
    
      <category term="深拷贝" scheme="http://yoursite.com/tags/%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    
  </entry>
  
  <entry>
    <title>session-cookie登录,与token</title>
    <link href="http://yoursite.com/2019/06/02/session-cookie%E7%99%BB%E5%BD%95-%E4%B8%8Etoken/"/>
    <id>http://yoursite.com/2019/06/02/session-cookie登录-与token/</id>
    <published>2019-06-02T07:27:37.000Z</published>
    <updated>2019-06-02T08:39:18.899Z</updated>
    
    <content type="html"><![CDATA[<h1 id="session-cookie登录与token"><a href="#session-cookie登录与token" class="headerlink" title="session-cookie登录与token"></a>session-cookie登录与token</h1><h2 id="session-cookie登录的实现"><a href="#session-cookie登录的实现" class="headerlink" title="session-cookie登录的实现"></a>session-cookie登录的实现</h2><ol><li><p>输入用户名密码点击登录，服务器拿账号密码去数据库中验证</p></li><li><p>验证成功，把用户对象保存到 session 中，sessionId会保存在 cookie 中（该cookie为浏览器自动生成的）。</p></li><li><p>登陆成功后，客户端发送请求，服务器端都可以通过（HttpSession.getId() 验证 cookie中的sessionId，来识别用户的身份）</p></li><li><p>自动登陆：会把登陆成功后的用户名和密码保存到cookie中，当session过期后在cookie中获取账号密码，进行验证。（一般cookie自动登陆都有过期时间）</p></li></ol><ul><li>session的生命周期</li></ul><ol><li><p>服务器重启（或服务器的 <code>IIS服务</code> 重启）；　</p></li><li><p>调用Session的invalidate方法。</p></li><li><p>用户关闭浏览器；</p></li><li><p>用户超过指定的时间（tomcat中默认为30分钟）没有与服务器发生交互（比如刷新页面、Ajax等）；</p></li></ol><h3 id="session-cookie方式的弊端"><a href="#session-cookie方式的弊端" class="headerlink" title="session-cookie方式的弊端"></a>session-cookie方式的弊端</h3><p>cookie的缺点：  </p><ol><li><p>cookie的大小仅为4（4096字节）kb。尽管很多新的浏览器中已经支持8192字节的cookie。</p></li><li><p>cookie不安全，cookie数据将裸漏在浏览器中，这样大大的增加了被盗的风险，所以一般不要把敏感的数据存放在cookie中，或者对cookie进行加密。</p></li><li><p>容易被xss或csrf攻击，获取到账号密码，或sessionId。</p></li></ol><p>session的缺点：</p><ol><li><p>当服务器用户多的情况下session会大大增加服务器的开销。</p></li><li><p>session基于cookie 可能会发生session顶替的风险。</p></li><li><p><code>用户认证之后，服务端做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须要请求在这台服务器上,这样才能拿到授权的资源，这样在分布式的应用上，相应的限制了负载均衡器的能力。这也意味着限制了应用的扩展能力。????????????????</code></p></li></ol><h3 id="jwt（Json-web-token）"><a href="#jwt（Json-web-token）" class="headerlink" title="jwt（Json web token）"></a>jwt（Json web token）</h3><p>jwt优点：</p><ol><li><p>因为JSON的通用性，jwt可以支持跨语言请求，像JAVA，JavaScript，NodeJS，PHP等很多语言都可以使用。</p></li><li><p>因为有了payload部分，所有JWT可以在自身存储一些业务需要的非敏感信息。</p></li><li><p>便于传输，jwt的构成非常简单，字节占用较小，所以非常便于传输。</p></li></ol><p>jwt缺点：</p><ol><li><p>登录状态信息续签问题。比如设置token的有效期为一个小时，那么一个小时后，如果用户仍然在这个web应用上，这个时候当然不能指望用户再登录一次。目前可用的解决办法是在每次用户发出请求都返回一个新的token，前端再用这个新的token来替代旧的，这样每一次请求都会刷新token的有效期。但是这样，需要频繁的生成token。另外一种方案是判断还有多久这个token会过期，在token快要过期时，返回一个新的token。</p></li><li><p>用户主动注销。JWT并不支持用户主动退出登录，当然，可以在客户端删除这个token，但在别处使用的token仍然可以正常访问。为了支持注销，我的解决方案是在注销时将该token加入黑名单。</p></li></ol><p>使用jwt注意点：</p><ol><li><p>在payload中不应该存放敏感信息，以为该部分客户端是可以解密的。</p></li><li><p>secret_key不能泄露。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;session-cookie登录与token&quot;&gt;&lt;a href=&quot;#session-cookie登录与token&quot; class=&quot;headerlink&quot; title=&quot;session-cookie登录与token&quot;&gt;&lt;/a&gt;session-cookie登录与tok
      
    
    </summary>
    
      <category term="登录" scheme="http://yoursite.com/categories/%E7%99%BB%E5%BD%95/"/>
    
    
      <category term="登录" scheme="http://yoursite.com/tags/%E7%99%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>http中的无状态指什么</title>
    <link href="http://yoursite.com/2019/06/01/http%E4%B8%AD%E7%9A%84%E6%97%A0%E7%8A%B6%E6%80%81%E6%8C%87%E4%BB%80%E4%B9%88/"/>
    <id>http://yoursite.com/2019/06/01/http中的无状态指什么/</id>
    <published>2019-05-31T19:09:39.000Z</published>
    <updated>2019-05-31T19:55:31.765Z</updated>
    
    <content type="html"><![CDATA[<h1 id="http协议无状态中的-“状态”-到底指的是什么？"><a href="#http协议无状态中的-“状态”-到底指的是什么？" class="headerlink" title="http协议无状态中的 “状态” 到底指的是什么？"></a>http协议无状态中的 “状态” 到底指的是什么？</h1><blockquote><p>转自 <a href="https://www.cnblogs.com/bellkosmos/p/5237146.html" target="_blank" rel="noopener">https://www.cnblogs.com/bellkosmos/p/5237146.html</a>  作者：赛艇队长</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;http协议无状态中的-“状态”-到底指的是什么？&quot;&gt;&lt;a href=&quot;#http协议无状态中的-“状态”-到底指的是什么？&quot; class=&quot;headerlink&quot; title=&quot;http协议无状态中的 “状态” 到底指的是什么？&quot;&gt;&lt;/a&gt;http协议无状态中的
      
    
    </summary>
    
      <category term="通信原理" scheme="http://yoursite.com/categories/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>深入了解cookie</title>
    <link href="http://yoursite.com/2019/06/01/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3cookie/"/>
    <id>http://yoursite.com/2019/06/01/深入了解cookie/</id>
    <published>2019-05-31T18:51:56.000Z</published>
    <updated>2019-05-31T18:54:20.927Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入了解cookie"><a href="#深入了解cookie" class="headerlink" title="深入了解cookie"></a>深入了解cookie</h1><h2 id="什么是cookie"><a href="#什么是cookie" class="headerlink" title="什么是cookie"></a>什么是cookie</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;深入了解cookie&quot;&gt;&lt;a href=&quot;#深入了解cookie&quot; class=&quot;headerlink&quot; title=&quot;深入了解cookie&quot;&gt;&lt;/a&gt;深入了解cookie&lt;/h1&gt;&lt;h2 id=&quot;什么是cookie&quot;&gt;&lt;a href=&quot;#什么是cookie&quot; c
      
    
    </summary>
    
      <category term="cookie" scheme="http://yoursite.com/categories/cookie/"/>
    
    
      <category term="cookie" scheme="http://yoursite.com/tags/cookie/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络通信</title>
    <link href="http://yoursite.com/2019/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/"/>
    <id>http://yoursite.com/2019/05/21/计算机网络通信/</id>
    <published>2019-05-21T14:51:37.000Z</published>
    <updated>2019-05-21T15:44:07.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机通信原理"><a href="#计算机通信原理" class="headerlink" title="计算机通信原理"></a>计算机通信原理</h1><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p>一个通信实例，通信中的三次握手:<br><img src="/2019/05/21/计算机网络通信/三次握手.jpg" alt="三次握手"></p><ol><li>红方A 要通过 蓝方C (不可靠路径)向 红方B 发送信息</li><li>为了让 A 知道 B 收到了消息，B 要派人向 A 传送<code>收到了</code>的信息</li><li>A 收到后，为了让 B 知道 自己收到了信息，向 B 发送确认消息。</li></ol><p>每次握手可能的情况: </p><ol><li>信使顺利到达。</li><li>信使没有到达,对方收到信息,首次发送信息的一方,不会一直等待回信,时间超时后会继续发送</li><li>信息被篡改,或伪造的信息</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;计算机通信原理&quot;&gt;&lt;a href=&quot;#计算机通信原理&quot; class=&quot;headerlink&quot; title=&quot;计算机通信原理&quot;&gt;&lt;/a&gt;计算机通信原理&lt;/h1&gt;&lt;h2 id=&quot;三次握手&quot;&gt;&lt;a href=&quot;#三次握手&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="通信原理" scheme="http://yoursite.com/categories/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>vuex笔记</title>
    <link href="http://yoursite.com/2019/04/28/vuex%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/04/28/vuex笔记/</id>
    <published>2019-04-28T00:59:59.000Z</published>
    <updated>2019-05-07T00:57:26.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><p><code>Vuex</code> 是一个专门为 <code>vue.js</code> 应用程序开发的 <code>状态管理模式</code>, 状态可以理解为数据, <code>Vuex</code> 可以把一些共享的数据, 集中起来提供 Store挂载的Vue实例的每个模块使用, 可以理解为是 <strong>对应的Vue实例的一个共享仓库</strong> 。</p><h2 id="什么时候使用vuex"><a href="#什么时候使用vuex" class="headerlink" title="什么时候使用vuex"></a>什么时候使用vuex</h2><ol><li><p>组件组件之间需要通信, 建议放在vuex。</p></li><li><p>需要跨多级组件通信, 建议放在vuex。</p></li><li><p>需要持久化的数据( 如登录后的用户信息 ), 建议放在vuex。</p></li><li><p>和业务强相关的数据, 可以放在组件内。</p></li></ol><h2 id="vuex使用步骤"><a href="#vuex使用步骤" class="headerlink" title="vuex使用步骤"></a>vuex使用步骤</h2><ol><li><p>在项目下运行 <code>npm install vuex --save</code></p></li><li><p>在main.js 下导入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;  --&gt; 注意 &apos;vue&apos; 是小写</span><br><span class="line">import Vuex from &apos;vuex&apos;  --&gt; 注意小写</span><br></pre></td></tr></table></figure></li><li><p>在一个模块化的项目中需要, 把vuex注册到项目中 <code>Vue.use(Vuex)</code></p></li><li><p>创建vuex实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">    state: &#123;&#125;,</span><br><span class="line">    mutations: &#123;&#125;,</span><br><span class="line">    actions: &#123;&#125;,</span><br><span class="line">    getters: &#123;&#125;,</span><br><span class="line">    modules: &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>把 store 挂载到 Vue实例上, 整个实例中的组件都可以获取到store中的数据。</p></blockquote><h3 id="modules模块化"><a href="#modules模块化" class="headerlink" title="modules模块化"></a>modules模块化</h3><p>为了避免, store中的数据过于集中从而变得不利于维护, 因此可以store分割成模块。每个模块拥有自己的state, mutations, actions, getters, 甚至嵌套子模块(modules)。</p><blockquote><p>模块化时, 需要把子模块挂载到<code>store</code>中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">new Vuex.Store(&#123;</span><br><span class="line">    modules:&#123;</span><br><span class="line">        moduleA,</span><br><span class="line">        moduleB</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>模块中通过 <code>namespaced: true</code> 开启命名空间(模块的命名空间为, 在modules中注册进去的key值: 上述中的moduleA)。如果子模块中没有命名空间, 会继承父模块的命名空间。</p></blockquote><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><p>用来读取<code>store</code>实例中的数据, 虽然直接修改<code>state</code>中的数据不会报错, 但是不建议直接修改, 不利于维护。</p><p>如果在某一个组件中直接通过<code>state</code> 错误的修改了数据, 通过state不容易查找到出错的源组件。</p><h3 id="mutations"><a href="#mutations" class="headerlink" title="mutations"></a>mutations</h3><p><strong>作用:</strong> 修改<code>state</code>中的值, 要通过<code>mutation</code> 修改(<code>mutation</code> 指的是 定义在<code>mutations</code>中的方法)。 </p><p>既然<code>vuex</code> 中的状态是响应式的, 那么我们变更状态时, 见识状态的vue组件也会自动更新。 <strong>因此<code>mutations</code>也要向使用<code>vue</code>一样遵守响应规则:</strong></p><ol><li><p>最好提前在<code>store</code>中初始化好所有需要的属性</p></li><li><p>当对象上添加新属性时, 你应该使用Vue.set(obj ,’newProp’, newVal), 或者以新对象替换老对象</p></li></ol><blockquote><p><code>mutation</code> 必须是同步函数, 我们调试一个项目并观察<code>devtools</code>中mutation日志, 每一条<code>mutation</code>被记录, <code>devtools</code> 都需要捕捉到前一状态和后以状态的快照( 可以理解为每个<code>mutation</code>的执行结果 )。异步会让这一功能无法完成, 因为当<code>mutation</code>触发时, 回调函数还没有被调用。<code>devtools</code> 不知道什么时候回调函数实际被调用 — 实质上任何在回调函数中进行的<code>state</code>改变都是没有办法追踪的。</p></blockquote><h3 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h3><p><code>getters</code> 可以看做是<code>store</code>的计算属性, getters 的返回值会根据它的依赖被缓存起来, 且只有当它的依赖发生了改变才会被重新计算。</p><blockquote><p><strong>注意:</strong> getters如果作为方法访问的时候, 每次都会被调用, 不会被缓存<br><strong>注意:</strong> getters 会暴露为store的属性, 因此可以通过$store.getters来访问它</p></blockquote><h3 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h3><p>actions 类似于mutations, 不同在于: action 一般用来调用 mutation 来修改state 而不是直接变更状态( 修改state )</p><p>actions 中可以包含任意的异步操作。</p><p>例如: 点击购物车商品加减的时候, 需要请求ajax中获取商品的库存等, 这时要修改state就要通过 action 请求数据 调用mutation 修改state</p><p>action 可以通过 store.dispatch(‘actionKey’) 触发, action支持载荷形式进行触发。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(&apos;increment&apos;,&#123;count:10&#125;)</span><br><span class="line"></span><br><span class="line">store.dispatch(&#123;type:&apos;increment&apos;,count:10&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="参数总结"><a href="#参数总结" class="headerlink" title="参数总结"></a>参数总结</h2><h3 id="state-1"><a href="#state-1" class="headerlink" title="state"></a>state</h3><ol><li><p>state 不是函数, 不需要传参</p></li><li><p>state 暴露为 store 的属性</p></li></ol><h3 id="mutations-1"><a href="#mutations-1" class="headerlink" title="mutations"></a>mutations</h3><p>mutation(state, payload(载荷))</p><ol><li><p>state 是当前 module 中的 state</p></li><li><p>payload 如果是单个数据, 可以是一个基本数据类型, 如果是多个数据, 要作为对象或数组的形式传递</p></li></ol><h3 id="getters-1"><a href="#getters-1" class="headerlink" title="getters"></a>getters</h3><ol><li><p>在根store上注册的getter接受以下参数, state, getters</p></li><li><p>在模块上定义的getter可以接受四个参数state, getters, rootState, rootGetters</p></li></ol><h3 id="actions-1"><a href="#actions-1" class="headerlink" title="actions"></a>actions</h3><ol><li>action 的第一个参数是context和store内容相同但不是store, 也可以拆解为对象:{state, rootState, commit, dispatch, getters, rootGetters}</li></ol><h3 id="Vue-Store-实例方法"><a href="#Vue-Store-实例方法" class="headerlink" title="Vue.Store 实例方法"></a>Vue.Store 实例方法</h3><ol><li><p>commit(‘moduleNamespaced/mutationKey’, payload, options), 如果要触发其他模块的mutation, 可以在options中通过{root: true, 在store中触发}</p></li><li><p>dispatch(‘module/actionKey’, payload, options), action 中的payload(载荷) 必须是一个对象, options 中可以是{root:true}</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vuex&quot;&gt;&lt;a href=&quot;#Vuex&quot; class=&quot;headerlink&quot; title=&quot;Vuex&quot;&gt;&lt;/a&gt;Vuex&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Vuex&lt;/code&gt; 是一个专门为 &lt;code&gt;vue.js&lt;/code&gt; 应用程序开发的 &lt;code&gt;状态管
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vuex" scheme="http://yoursite.com/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>&#39;js基础&#39;</title>
    <link href="http://yoursite.com/2019/04/23/js%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2019/04/23/js基础/</id>
    <published>2019-04-23T00:41:18.000Z</published>
    <updated>2019-04-29T05:50:10.752Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js基础篇"><a href="#js基础篇" class="headerlink" title="js基础篇"></a>js基础篇</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><strong>函数的作用</strong> ,可以写一次代码, 封装到函数中, 然后反复的使用这个函数。</p><blockquote><p><strong>注意: 函数也是一个对象</strong></p></blockquote><h3 id="函数的声明"><a href="#函数的声明" class="headerlink" title="函数的声明"></a>函数的声明</h3><ul><li><p>构造方法创建函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var fun = new Function(``) </span><br><span class="line"></span><br><span class="line">打印此函数为 ==&gt;</span><br><span class="line"></span><br><span class="line">`function anyomous()&#123;&#125;` -- aonymous 意为 不知名,匿名</span><br></pre></td></tr></table></figure></li><li><p>字面量创建函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function 函数名()&#123;</span><br><span class="line">    函数体;</span><br><span class="line">    return 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>匿名函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function()&#123;&#125; --&gt; 这是一个匿名函数, 匿名函数的本身是一个函数对象</span><br></pre></td></tr></table></figure></li><li><p>函数表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">匿名函数如果要反复使用, 可以使用函数表达式的形式</span><br><span class="line">var fun = function()&#123;&#125;; --&gt; 函数表达式 不会进行提升</span><br></pre></td></tr></table></figure></li></ul><h3 id="函数的调用和参数"><a href="#函数的调用和参数" class="headerlink" title="函数的调用和参数"></a>函数的调用和参数</h3><ul><li><p>函数调用</p><ol><li><p>无论是哪一个函数的声明方式都是通过: <code>函数名(实参..)</code> 的形式调用。 </p></li><li><p>在标签中调用函数必须要加上括号, 例: <code>onclick = &#39;函数名(实参1,...,实参n)&#39;</code> </p></li></ol></li><li><p>函数参数</p></li></ul><p>调用函数的时候解析器不会检查实参的类型和数量, 所以多传几个实参也不会报错, 多传的实参可以通过arguments对象获取到。</p><h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><ol><li><p>调用函数之后会得到一个返回值。如果没有使用 return 显示返回一个值, 则默认返回undefined。</p></li><li><p>return 之后的代码不会被执行</p></li><li><p>return 可以返回任意数据类型的值。</p></li></ol><h3 id="自执行函数-立即执行函数"><a href="#自执行函数-立即执行函数" class="headerlink" title="自执行函数(立即执行函数)"></a>自执行函数(立即执行函数)</h3><ul><li>如果要封装一个代码块, 并且执行一次, 需要变量名吗? </li></ul><p>变量名会在cpu中 开辟空间, 占用资源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;(function()&#123; 函数体; &#125;)() --&gt; 在前面加分号为了避免之前的代码没有加 ; 导致计算机不能正确的认识代码</span><br></pre></td></tr></table></figure><h3 id="隐式全局变量"><a href="#隐式全局变量" class="headerlink" title="隐式全局变量"></a>隐式全局变量</h3><p>在函数中如果没有在全局和函数作用域 中 都没有声明该变量, 那么该变量会被隐式声明为全局变量, 但是这种语法是错误的, 在 严格模式(use strict) 下会报错。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function say()&#123;</span><br><span class="line">    // 隐式全局变量, 错误的语法, 在严格模式下会报错</span><br><span class="line">    age = 20; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="JSON-JavaScript-Object-Notation-js对象表示法"><a href="#JSON-JavaScript-Object-Notation-js对象表示法" class="headerlink" title="JSON(JavaScript Object Notation js对象表示法)"></a>JSON(JavaScript Object Notation js对象表示法)</h2><ul><li>为什么要有JSON</li></ul><p>JS对象只会JS自己认识, 其他语言都不认识。</p><p>JSON就是一个特殊格式的字符串, 这个字符串可以被任意语言识别, 可以完成语言与语言之间的交互, 转化成任意语言中的对象,JSON在开发中主要是交互数据。 例: 前后端的交互。</p><h3 id="JSON对象"><a href="#JSON对象" class="headerlink" title="JSON对象"></a>JSON对象</h3><p>JSON对象的本质就是JS对象, 按照一定的书写规范, 在JSON对象和JSON对象字符串之间的转换。JSON不兼容ie7</p><p>JSON分为 JSON数组 和 JSON对象,JSON 对象 可以理解成是 对 JS 对象的 JSON 格式</p><p>JSON中允许的值:</p><pre><code>1. 字符串2. 数值3. 布尔值4. null5. 对象6. 数组</code></pre><blockquote><p>JSON对象中不能写函数对象,且属性名要加引号</p></blockquote><h3 id="JSON工具类"><a href="#JSON工具类" class="headerlink" title="JSON工具类"></a>JSON工具类</h3><p>在JS中提供了JSON工具类, 可以使JSON字符串和JSON对象互相转换;</p><ul><li><p>parse方法 将JSON字符串转换为js对象</p></li><li><p>stringify方法 将对象转换为json字符串</p></li></ul><h3 id="eval-方法"><a href="#eval-方法" class="headerlink" title="eval()方法"></a>eval()方法</h3><p>这个函数可以用来执行一段字符串形式的代码,并执行结果返回<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot;alert(&apos;hello&apos;)&quot;</span><br><span class="line">eval(str)</span><br><span class="line">==&gt; 页面弹出 hello</span><br></pre></td></tr></table></figure></p><p>如果执行的字符串中含有{}, 会将{} 当成代码块, 如果不希望将其当成代码块解析, 则需要在字符串前后在上()<br>eval() 可以将 JSON 转为js 对象, 因为性能差, 具备安全隐患所有不建议使用。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;js基础篇&quot;&gt;&lt;a href=&quot;#js基础篇&quot; class=&quot;headerlink&quot; title=&quot;js基础篇&quot;&gt;&lt;/a&gt;js基础篇&lt;/h1&gt;&lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函
      
    
    </summary>
    
      <category term="js基础" scheme="http://yoursite.com/categories/js%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="js基础" scheme="http://yoursite.com/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>&#39;js高级部分&#39;</title>
    <link href="http://yoursite.com/2019/04/23/js%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86/"/>
    <id>http://yoursite.com/2019/04/23/js高级部分/</id>
    <published>2019-04-23T00:21:48.000Z</published>
    <updated>2019-04-24T01:09:22.754Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js高级部分"><a href="#js高级部分" class="headerlink" title="js高级部分"></a>js高级部分</h1><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="面向对象的特点"><a href="#面向对象的特点" class="headerlink" title="面向对象的特点"></a>面向对象的特点</h3><p>面向对象编程具有, 复用性强, 灵活性强, 易扩展易维护; 比起传统的面向过程更适合多人合作的大型项目。</p><h3 id="面向对象的三大特征"><a href="#面向对象的三大特征" class="headerlink" title="面向对象的三大特征"></a>面向对象的三大特征</h3><ol><li>封装</li><li>继承</li><li>多态(抽象)</li></ol><h3 id="面向对象和面向过程"><a href="#面向对象和面向过程" class="headerlink" title="面向对象和面向过程"></a>面向对象和面向过程</h3><ol><li><p>面向过程是亲力亲为, 面向对象是将执行者转变为智慧者。</p></li><li><p>面向对象就是特定的功能让特定的对象来实现。</p></li><li><p>面向对象不是面向过程的代替, 而是面向过程的封装</p></li></ol><h3 id="js面向对象的方式"><a href="#js面向对象的方式" class="headerlink" title="js面向对象的方式"></a>js面向对象的方式</h3><ol><li><p>在 js 中面向对象中创建实例的模板是构造函数。</p></li><li><p>在其他语言中对象模板是类。</p></li></ol><h3 id="静态成员和实例成员"><a href="#静态成员和实例成员" class="headerlink" title="静态成员和实例成员"></a>静态成员和实例成员</h3><p>js静态成员(java中静态的属性和方法)</p><ol><li>js 中静态成员是以对象字面量的形式创建,没有构造函数( 例: Math对象, Math 对象不是构造函数 )</li></ol><p>// 模拟Math对象<br>var MyMath = {<br>    PI: 3.14..,<br>    max:function(){},<br>    min:function(){}<br>}</p><ol start="2"><li>静态成员可以直接调用使用静态对象来调用, 实例成员调用需要创建实例对象调用。</li></ol><blockquote><p><strong>注意:</strong> Math 是以字面量形式创建, 没有构造函数, 无法通过new Math() 创建对象。 </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;js高级部分&quot;&gt;&lt;a href=&quot;#js高级部分&quot; class=&quot;headerlink&quot; title=&quot;js高级部分&quot;&gt;&lt;/a&gt;js高级部分&lt;/h1&gt;&lt;h2 id=&quot;面向对象&quot;&gt;&lt;a href=&quot;#面向对象&quot; class=&quot;headerlink&quot; title=&quot;面
      
    
    </summary>
    
      <category term="js进阶" scheme="http://yoursite.com/categories/js%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="js面向对象" scheme="http://yoursite.com/tags/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>&#39;html笔记&#39;</title>
    <link href="http://yoursite.com/2019/04/23/html%E7%AC%94%E8%AE%B0-0/"/>
    <id>http://yoursite.com/2019/04/23/html笔记-0/</id>
    <published>2019-04-23T00:19:23.000Z</published>
    <updated>2019-04-23T00:19:23.653Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>css笔记</title>
    <link href="http://yoursite.com/2019/04/23/css%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/04/23/css笔记/</id>
    <published>2019-04-23T00:16:47.000Z</published>
    <updated>2019-05-02T08:10:20.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="css篇"><a href="#css篇" class="headerlink" title="css篇"></a>css篇</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;css篇&quot;&gt;&lt;a href=&quot;#css篇&quot; class=&quot;headerlink&quot; title=&quot;css篇&quot;&gt;&lt;/a&gt;css篇&lt;/h1&gt;
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>HTML笔记</title>
    <link href="http://yoursite.com/2019/04/16/HTML%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/04/16/HTML笔记/</id>
    <published>2019-04-16T00:51:21.000Z</published>
    <updated>2019-04-23T00:30:40.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="常见的通用属性"><a href="#常见的通用属性" class="headerlink" title="常见的通用属性"></a>常见的通用属性</h2><h3 id="id属性"><a href="#id属性" class="headerlink" title="id属性"></a>id属性</h3><p>id属性 作为标签的唯一标识, 在同一个页面中不能出现不同的 id值。 </p><h3 id="class属性"><a href="#class属性" class="headerlink" title="class属性"></a>class属性</h3><p>class属性 用来为标签分组, 拥有相同的 class值 的标签可以看做是一组, 同一个页面中可以出现相同的 class , 同一个标签也可以有多个 id</p><h3 id="title属性"><a href="#title属性" class="headerlink" title="title属性"></a>title属性</h3><p>title属性 用来指定标签的标题, 指定 title 以后, 鼠标移入到元素上方时,会出提示 title属性中的内容。</p><h2 id="常用的标签"><a href="#常用的标签" class="headerlink" title="常用的标签"></a>常用的标签</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h1&gt;&lt;h2 id=&quot;常见的通用属性&quot;&gt;&lt;a href=&quot;#常见的通用属性&quot; class=&quot;headerlink&quot; title=&quot;常见的
      
    
    </summary>
    
      <category term="html" scheme="http://yoursite.com/categories/html/"/>
    
    
      <category term="html基础" scheme="http://yoursite.com/tags/html%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>vue框架概述</title>
    <link href="http://yoursite.com/2019/04/15/vue%E6%A1%86%E6%9E%B6%E6%A6%82%E8%BF%B0/"/>
    <id>http://yoursite.com/2019/04/15/vue框架概述/</id>
    <published>2019-04-15T13:11:59.000Z</published>
    <updated>2019-04-15T13:12:36.153Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="vue框架" scheme="http://yoursite.com/categories/vue%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="框架概述" scheme="http://yoursite.com/tags/%E6%A1%86%E6%9E%B6%E6%A6%82%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>vue路由</title>
    <link href="http://yoursite.com/2019/04/15/vue%E8%B7%AF%E7%94%B1/"/>
    <id>http://yoursite.com/2019/04/15/vue路由/</id>
    <published>2019-04-15T11:26:05.000Z</published>
    <updated>2019-04-26T00:18:36.545Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue-router-路由"><a href="#vue-router-路由" class="headerlink" title="vue-router(路由)"></a>vue-router(路由)</h1><h2 id="路由起步"><a href="#路由起步" class="headerlink" title="路由起步"></a>路由起步</h2><p>当引入vue-router包之后, 在window中就有了VueRouter构造器, 此时在打开网页时, 路径后就会加一个 #/ (#/ 被称为哈希) </p><p>通过注入vue-router.js, 我们可以在任何组件内 访问到 路由 和 路由器, 也可以通过 this.$route 访问路由。同一个Vue实例中, $route 和 $router  是整个 #app 和 组件 中共有的。</p><p><strong>注意:</strong> 如果路由匹配成功, 将自动设置class=”router-link-active”属性值</p><p><strong>使用步骤:</strong><br>HTML部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用 VueRouter 提供的标签 router-link 组进行导航 --&gt;</span><br><span class="line">&lt;!-- &apos;to&apos;属性指向链接 --&gt;</span><br><span class="line">&lt;!-- router-link 默认会解析成 a标签, 可以使用 tag 属性指定解析成你想要的标签 --&gt;</span><br><span class="line">&lt;router-link to=&quot;/login&quot; tag=&quot;span&quot;&gt;登录&lt;/router-link&gt;</span><br><span class="line">&lt;router-link to-&quot;/register&quot;&gt;注册&lt;router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 路由出口, 占位符, 将路由匹配到的组件展示在这里 --&gt;</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure></p><p>JS部分</p><blockquote><p><strong>注意:</strong> 如果使用模块化机制编程, 导入Vue 和VueRouter 要调用vue.use(VueRouter)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 1. 创建组件模板</span><br><span class="line">var login = &#123;</span><br><span class="line">    template:&apos;&lt;div&gt;这是登录组件&lt;/div&gt;&apos;</span><br><span class="line">&#125;</span><br><span class="line">var register = &#123;</span><br><span class="line">    template:&apos;&lt;div&gt;注册&lt;/div&gt;&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 2. 创建路由对象</span><br><span class="line">var router = new VueRouter(&#123;</span><br><span class="line">    routes:[</span><br><span class="line">        &#123;path:&apos;/login&apos;,</span><br><span class="line">        component:login&#125;,</span><br><span class="line">        &#123;path:&apos;/register&apos;,</span><br><span class="line">        component:register&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 3. 把路由对象注入/ 挂载到vue实例中, 从而让整个应用都有路由功能</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">    el:&apos;#app&apos;,</span><br><span class="line">    router</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><hr><h2 id="动态路由的匹配-路由传参"><a href="#动态路由的匹配-路由传参" class="headerlink" title="动态路由的匹配(路由传参)"></a>动态路由的匹配(路由传参)</h2><blockquote><p>假设有一个 登录组件 ,对于所有的用户ID, 都要使用这个组件来渲染, 那么每次渲染的时候 虽然是同一个组件, 但是每个用户的数据不同, 那么就可以在 路由的匹配规则中使用 动态路径参数 来实现该功能。</p></blockquote><h3 id="params动态路径参数"><a href="#params动态路径参数" class="headerlink" title="params动态路径参数"></a>params动态路径参数</h3><blockquote><p>注意: 是 $route.params 而不是 $router</p></blockquote><ul><li>使用方法</li></ul><ol><li>在路由匹配规则中对参数进行占位, 跳转的时候 <strong>必须</strong> 要传一个与该参数对应的值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/login/001&quot; &gt;登录&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    path:&apos;/login/:键&apos;,</span><br><span class="line">    component:`</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h2&gt;这是登录组件,当前用户为:&#123;&#123;$route.params.id&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    `</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>匹配多个参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/account/001/login/002&quot;&gt;</span><br><span class="line"></span><br><span class="line">&#123;path:&apos;/account/:type/login/:id&apos;&#125;</span><br><span class="line"></span><br><span class="line">==》$route.params:&#123;type:&apos;001&apos;,id:&apos;002&apos;&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="query传参"><a href="#query传参" class="headerlink" title="query传参"></a>query传参</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/login?id=001&quot;&gt;</span><br><span class="line"></span><br><span class="line">$route.query :&#123;id:&apos;001&apos;&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="设置路由的激活样式"><a href="#设置路由的激活样式" class="headerlink" title="设置路由的激活样式"></a>设置路由的激活样式</h2><h3 id="router-link-active"><a href="#router-link-active" class="headerlink" title="router-link-active"></a>router-link-active</h3><blockquote><p>当匹配上的路由跳转之后, 会加上 router-link-active 的class属性值, 可以通过给router-link-active 来设置当前激活路由的样式</p></blockquote><h3 id="router-link-exact-active"><a href="#router-link-exact-active" class="headerlink" title="router-link-exact-active"></a>router-link-exact-active</h3><blockquote><p>该类选择器是当前 激活 的 精确 路由, 而router-link-active 是当前路由中所有匹配到的路由, 例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/account/login  ==&gt;  account,login</span><br><span class="line"></span><br><span class="line">--&gt; account,login都是路径匹配到的路由,都会有router-link-active</span><br><span class="line"></span><br><span class="line">--&gt; 只有 login 是当前精确的路由 会有router-link-exact-active</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="linkActiveClass属性"><a href="#linkActiveClass属性" class="headerlink" title="linkActiveClass属性"></a>linkActiveClass属性</h3><blockquote><p>路由对象的 linkActiveClass属性 可以自定义 router-link-active 的class 命名, 例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">new VueRouter(&#123;</span><br><span class="line">    routes:[],</span><br><span class="line"></span><br><span class="line">    // 自定义router-link-active 为 myClass</span><br><span class="line">    linkActiveClass: &apos;myClass&apos; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h2><blockquote><p>此重定向原理是直接改变锚点地址, 并不是后端的重定向,不需要通过服务器重定向。</p></blockquote><ol><li>重定向设置默认匹配路径</li></ol><p>例: 当访问 根路径 的时候默认访问/login<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">path:&apos;/&apos;,redirect:&apos;/login&apos;</span><br><span class="line">``` </span><br><span class="line">---</span><br><span class="line">##  捕获所有404路由</span><br><span class="line">&gt; 如果想匹配任意路径, 使用通配符 * </span><br><span class="line"></span><br><span class="line">--- </span><br><span class="line">##  匹配优先级</span><br><span class="line">&gt; 同一路径可以匹配多个路由, 此时谁先定义IDE谁的优先级就高</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">##  路由嵌套</span><br><span class="line">&gt; 路由之间也可以有嵌套关系</span><br></pre></td></tr></table></figure></p><p>/user/foo/profile                     /user/foo/posts<br>+——————+                  +—————–+<br>| User             |                  | User            |<br>| +————–+ |                  | +————-+ |<br>| | Profile      | |  +————&gt;  | | Posts       | |<br>| |              | |                  | |             | |<br>| +————–+ |                  | +————-+ |<br>+——————+                  +—————–+<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+   children </span><br><span class="line">&gt; children 用来设置子路由的匹配规则, 例:</span><br></pre></td></tr></table></figure></p><p>routes:[<br>    {path:’/‘,redirect:’/user’},<br>    {<br>        path:’/user’,<br>        component:user,<br>        children:[<br>            {path:’profile’,component:profile},<br>            {path:’posts’,component:posts}<br>        ]<br>    }<br>]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">##  侦听路由</span><br><span class="line">&gt; 在使用路由参数时, 参数的改变, 原来的组件实例会被复用, 也就是说 /login/张三 到 /login/李四, 它们使用的都是匹配 /login 的组件, 此时组件会被复用, 组件被复用会比较高效, 但这意味着 它们的改变不会调用生命周期函数。</span><br><span class="line"></span><br><span class="line">&gt; 复用组件时, 想对路由的变化做出响应, 可以通过侦听器监听路由的改变</span><br></pre></td></tr></table></figure></p><p>const User = {<br>    template:’…’,<br>    watch:{<br>        ‘$route’(to,from){<br>            // 对路由的变化做出响应<br>        }<br>    }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">##  编程式的导航</span><br><span class="line"></span><br><span class="line">除了使用`&lt;router-link&gt;` 来进行跳转 锚点 之外, 还可以借助 router实例的方法, 通过编写代码来实现。</span><br><span class="line"></span><br><span class="line">在Vue实例内部, 可以访问到$router, 因此可以通过 this.$router.push 导航到不同的URL</span><br></pre></td></tr></table></figure></p><pre><code>// 字符串router.push(&apos;/login&apos;)// 对象router.push({path:&apos;/login&apos;})// 命名的路由,对应路由的name属性router.push({name:&apos;login&apos;,params:{useId:&apos;123&apos;}})// 如果提供了 path, params会被忽略 , 但是query不会router.push({path:&apos;/login&apos;,query:{useId:&apos;123&apos;}})// 带有params参数应该写成如下形式router.push({path:&apos;/login/useId&apos;})</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+   router.replace</span><br><span class="line">&gt; router.replace 跟 router.push 很像, 唯一的不同就是, 它不会像history中添加新记录, 而是跟它的方法名一样 --- 替换掉当前的 history 记录</span><br><span class="line"></span><br><span class="line">+   router.go(n), 意思是历史记录,前进或者后退n步</span><br></pre></td></tr></table></figure><p>router.go(1) –&gt; 前进1步</p><p>rouetr.go(-1) –&gt; 后退1步<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">##  命名路由</span><br><span class="line"></span><br><span class="line">有时候, 通过名称来表示一个路由显的更方便一点, 可以通过路由匹配规则中添加name 属性, 例:</span><br></pre></td></tr></table></figure></p><p>{path:’/login’,<br>name:’login’,<br>component:login}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">router-link 通过 路由的 name 跳转, 这和 push 很相似, to 后面要跟一个对象</span><br></pre></td></tr></table></figure></p><p><router-link to="{name:'login',params:{userId:'001'}}"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">##  命名视图</span><br><span class="line">&gt; 时候想要同一个路径展示多个组件,而不是嵌套展示,可以使用命名视图, 区别于命名路由</span><br></pre></td></tr></table></figure></router-link></p><p>// 如果路由出口 router-view 没有设置 name , 则 name 默认为 default</p><template id="login"><br>    <router-view name="a"></router-view><br>    <router-view name="b"></router-view><br>    <router-view></router-view><br></template><p>const router = VueRouter({<br>    routes:[<br>        {path:’/login’,<br>        components:{<br>            default:com1,<br>            a:com2,<br>            c:com3<br>        }}<br>    ]<br>})<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##  导航守卫</span><br><span class="line"></span><br><span class="line">&gt; **导航** 表示路由正在发生改变。</span><br><span class="line"></span><br><span class="line">正如其名, `vue-router` 提供的导航守卫主要用来 通过跳转或取消的方式来 守卫**导航** 。</span><br><span class="line"></span><br><span class="line">&gt; **注意:** 路由中参数的改变并不会触发 进入/离开 的导航守卫。你可以通过侦听 `$route`对象 或 beforeRouteUpdate 的组件内守卫。 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 全局前置守卫</span><br><span class="line"></span><br><span class="line">router.beforeEach 用来注册一个全局前置守卫,当一个导航触发时, 全局前置守卫按照创建顺序调用。守卫是异步解析执行, 此时导航( 正在发生改变的路径 )在所有的守卫resolve 完之前一直处于等待状态。</span><br><span class="line"></span><br><span class="line">&gt; 全局导航每个路由的改变都会触发, 不会触发路由参数的改变</span><br><span class="line"></span><br><span class="line">**每个守卫方法接受三个参数:**</span><br><span class="line"></span><br><span class="line">+   to, 即将要进入的目标路由</span><br><span class="line"></span><br><span class="line">+   from, 当前导航( 表示路由正在发生改变 )正要离开的路由</span><br><span class="line"></span><br><span class="line">+   next, **一定要调用该方法resolve这个钩子(before)** ,执行效果依赖于next方法的参数。</span><br><span class="line"></span><br><span class="line">    - next() 执行管道中的下一个钩子, 如果管道中的钩子执行完了, 则导航的状态就是 confirm (确认的,即确定进入to:route)</span><br><span class="line"></span><br><span class="line">    - next(false): 中断当前的导航。如果浏览器的url改变了( 可能是用户手动输入了 url 或浏览器后退按钮 ),那么 URL 的地址会重置到 from 对应的路由。</span><br><span class="line"></span><br><span class="line">    - next(&apos;/&apos;) 或者是 next(&#123;path:&apos;/&apos;&#125;) 跳转到一个不同的地址。即当前跳转的导航中断, 然后进行一个新的导航。可以向next() 中传递任意对象, 且允许设置诸如 replace:true, name:&apos;home&apos; 之类的选项 以及 用在 router-link 中的 to属性 和应用在 router.push 中的选项。</span><br><span class="line"></span><br><span class="line">    - next(error) 如果传给next的是一个 Error 实例, 则导航会被终止, 且错误会被传递给 router.onError() 注册过的回调 --&gt; 暂时不了解</span><br><span class="line">### 全局解析守卫</span><br><span class="line"></span><br><span class="line">router.beforeResolve 注册一个全局解析守卫, 这和 `beforeEach` 类似, 区别在导航被确认之前, 同时在所有的组件内守卫 和 异步路由组件 被解析之后, 解析守卫会被调用。</span><br><span class="line"></span><br><span class="line">### 全局后置钩子</span><br><span class="line"></span><br><span class="line">`router.afterEach` 注册一个全局后置钩子, 这些钩子不会接受 next 参数, 不会改变导航本身。</span><br><span class="line"></span><br><span class="line">### 路由独享的守卫</span><br><span class="line"></span><br><span class="line">可以在路由里直接定义 `beforeEnter` 守卫</span><br></pre></td></tr></table></figure></p><p>const router = new VueRouter({<br>    routes: [<br>        {<br>            path:’/home’,<br>            component: Home,<br>            beforeEnter: () =&gt; {<br>                …<br>            }<br>        }<br>    ]<br>})<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 组件内的守卫</span><br><span class="line"></span><br><span class="line">最后, 可以在路由组件内定义以下路由导航守卫: </span><br><span class="line"></span><br><span class="line">+   beforeRouteEnter </span><br><span class="line"></span><br><span class="line">    1. 该钩子会在渲染该组件的对应路由被 confirm 前被调用</span><br><span class="line"></span><br><span class="line">    2. **不能** 获取组件 **实例this** ,因为当守卫执行完之前, 组件实例还没有被创建。</span><br><span class="line"></span><br><span class="line">+   beforeRouteUpdate </span><br><span class="line">    </span><br><span class="line">    1. 在当前路由改变, 但是组件被复用的时候调用, 例: 动态匹配路由 </span><br><span class="line"></span><br><span class="line">    2. 该钩子**可以访问组件实例this**</span><br><span class="line"></span><br><span class="line">+   beforeRouteLeave</span><br><span class="line"></span><br><span class="line">    1. 导航离开该组件的路有时调用</span><br><span class="line"></span><br><span class="line">    2. 可以访问 this </span><br><span class="line"></span><br><span class="line">&gt; beforeRouteEnter 不能访问到 组件实例this, 是因为该守卫在导航被确认之前被调用, 此时即将登场的新组建还没有被创建。</span><br><span class="line"></span><br><span class="line">&gt; **但是,** 可以传一个回调函数给`next`来访问组件实例。在导航被确认的时候执行回调, 并且把组件的实例作为回调方法的参数。</span><br></pre></td></tr></table></figure></p><p>beforeRouteEnter(to, from, next){<br>    next( vm =&gt; {<br>        // 通过 vm 访问组件实例<br>    })<br>}<br><code>`</code></p><blockquote><p><strong>注意:</strong> <code>beforeRouteEnter</code> 是唯一支持 next 方法中传回调函数获取 组件实例的钩子, 对 <code>beforeRouteUpdate</code> <code>beforeRouteLeave</code> 两者来说也没有要使用回调获取组件实例的必要</p></blockquote><blockquote><p><code>beforeRouteLeave</code> 一般用来禁止用户还未保存修改之前离开。该导航可以通过 next(false) 取消。</p></blockquote><h3 id="导航完整的解析-resolve-流程"><a href="#导航完整的解析-resolve-流程" class="headerlink" title="导航完整的解析(resolve)流程"></a>导航完整的解析(resolve)流程</h3><ol><li><p>导航被触发</p></li><li><p>在失活的组件内调用离开守卫 <code>beforeRouteLeave</code></p></li><li><p>调用全局的 <code>beforeEach</code> 守卫</p></li><li><p>在重用的组件里调用 <code>beforeRouteUpdate</code> 守卫 (2.2+)</p></li><li><p>在路由配置里调用 <code>beforeEnter</code></p></li><li><p>解析异步路由组件</p></li><li><p>在被激活的组件里调用<code>beforeRouteEnter</code>。</p></li><li><p>调用全局的<code>beforeResolve</code> 守卫(2.5+)</p></li><li><p>导航被确认confirm</p></li><li><p>调用全局的afterEach钩子( afterEach 在confirm 之后 触发DOM更新之前调用)</p></li><li><p>触发DOM更新</p></li><li><p>用创建好的组件实例调用<code>beforeRouteEnter</code>守卫中传给 next 回调函数。</p></li></ol><h2 id="路由元信息"><a href="#路由元信息" class="headerlink" title="路由元信息"></a>路由元信息</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue-router-路由&quot;&gt;&lt;a href=&quot;#vue-router-路由&quot; class=&quot;headerlink&quot; title=&quot;vue-router(路由)&quot;&gt;&lt;/a&gt;vue-router(路由)&lt;/h1&gt;&lt;h2 id=&quot;路由起步&quot;&gt;&lt;a href=&quot;#路由起
      
    
    </summary>
    
      <category term="vue框架" scheme="http://yoursite.com/categories/vue%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="vue路由" scheme="http://yoursite.com/tags/vue%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>vue组件-下</title>
    <link href="http://yoursite.com/2019/04/15/vue%E7%BB%84%E4%BB%B6-%E4%B8%8B/"/>
    <id>http://yoursite.com/2019/04/15/vue组件-下/</id>
    <published>2019-04-15T07:04:28.000Z</published>
    <updated>2019-04-15T12:56:39.176Z</updated>
    
    <content type="html"><![CDATA[<h1 id="组件-下"><a href="#组件-下" class="headerlink" title="组件-下"></a>组件-下</h1><h2 id="vue插槽"><a href="#vue插槽" class="headerlink" title="vue插槽"></a>vue插槽</h2><blockquote><p>在组件标签中的内容, 被称为组件插槽。</p></blockquote><blockquote><p>如果组件模板中没有定义 <code>&lt;slot&gt;&lt;/slot&gt;</code> 那么组件标签中间的内容都会被抛弃, <code>&lt;slot&gt;</code> 是一个占位符。</p></blockquote><blockquote><p>插槽中的内容可以是文本, 标签, 甚至是组件。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-com&gt;</span><br><span class="line">插槽内容: 可以是文本, 标签, 甚至是组件。</span><br><span class="line">&lt;/my-com&gt;</span><br></pre></td></tr></table></figure><h3 id="编译作用域"><a href="#编译作用域" class="headerlink" title="编译作用域"></a>编译作用域</h3><p>插槽作用域: 可以简单的理解为, 在谁控制的区域写, 就是写在谁的作用域内。</p><blockquote><p><strong>作为一条规则, 请记住:</strong> 父级模板中的所有内容都是在父级作用域中编译的, 子模板里的所有内容都是在子作用域中编译的。</p></blockquote><h3 id="后备插槽-插槽的默认值"><a href="#后备插槽-插槽的默认值" class="headerlink" title="后备插槽(插槽的默认值)"></a>后备插槽(插槽的默认值)</h3><p>插槽 可以有 默认值, 称为后备插槽, 当组件标签中没有内容的时候, 我们可以在组件模板中的<code>&lt;slot&gt;默认值&lt;/slot&gt;</code> 中间设置默认值</p><blockquote><p><strong>注意:</strong> 由于编译作用域的关系, 后备插槽是无法直接引用同级组件作为后备内容的, 而父级组件中引用子组件 的标签中间部分 可以引用同级组件作为后备内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-com&gt;&lt;插槽可以引用同级组件&gt;&lt;/my-com&gt;</span><br><span class="line"></span><br><span class="line">&lt;slot&gt;插槽默认内容无法使用引用同级组件&lt;/slot&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>在使用集成框架的时候见的比较多, 具名插槽出现的需求是 一个组件的内容<code>&lt;slot&gt;</code>部分, 如何实现同时插入多个<code>&lt;slot&gt;</code></p><p>没有 v-slot 指令的指默认为 default, 无论怎么打乱布局, 都会只按照模板对象中 <code>&lt;slot&gt;</code> 的位置进行排版</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-com&gt;</span><br><span class="line">    &lt;template v-slot:header &gt;</span><br><span class="line">        &lt;h2&gt;这是header部分&lt;/h2&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;p&gt;default&lt;/p&gt;</span><br><span class="line">    &lt;template v-slot:footer&gt;</span><br><span class="line">        &lt;h2&gt;这是footer部分&lt;/h2&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;p&gt;default&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;default&lt;/p&gt;</span><br><span class="line">&lt;/my-com&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template id=&quot;tmpl&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;p&gt;这是myCom组件&lt;/p&gt;</span><br><span class="line">        &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;slot&gt;&lt;/slot&gt;      &lt;!-- 对于没有name 的slot 会有一个隐式的名字 --&gt;</span><br><span class="line">        &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="vue作用域插槽"><a href="#vue作用域插槽" class="headerlink" title="vue作用域插槽"></a>vue作用域插槽</h3><blockquote><p>作用域插槽可以让插槽内容, 访问到子组件中的数据。这在有些时候是比较有用的</p></blockquote><p>例: 父级作用域要访问 子组件 <code>&lt;current-user&gt;</code> 中的 user 数据。首先要现在子组件的<code>&lt;slot&gt;</code>将该数据作为属性绑定到自身。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;current-user&gt;</span><br><span class="line">    &lt;!-- 包含所有插槽 prop 的对象命名为 slotProps --&gt;</span><br><span class="line">    &lt;template v-slot:default=&quot;propSlot&quot;&gt;</span><br><span class="line">        &#123;&#123;propSlot.user&#125;&#125;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/current-user&gt;</span><br><span class="line"></span><br><span class="line">&lt;template id=&quot;current-user&quot;&gt;</span><br><span class="line">    &lt;!-- 绑定在 &lt;slot&gt; 元素上的值 被称为插槽prop --&gt;</span><br><span class="line">    &lt;slot :user=&quot;user&quot;&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="处理边界情况"><a href="#处理边界情况" class="headerlink" title="处理边界情况"></a>处理边界情况</h2><blockquote><p>在绝大多数情况下, 我们最好不要触达另一个组件实例内部或手动操作 DOM 元素。不过也确实在一些情况下做这些事情是合适的。</p></blockquote><ol><li><p>访问根实例</p><p> 在每个Vue实例的子组件中, 其根实例可以通过<code>root</code>属性进行访问。例如,在这个根实例中: </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data:&#123;</span><br><span class="line">    foo:1;</span><br><span class="line">&#125;,</span><br><span class="line">computed:&#123;</span><br><span class="line">    bar()&#123;</span><br><span class="line">        return 2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">    baz()&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 所有的子组件都可以将这个实例作为一个全局 store 来访问或使用。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;return &#123;...&#125;&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">    test()&#123; // 子组件中的方法</span><br><span class="line">        this.$root.foo          --&gt; 获取根组件 data 中的foo</span><br><span class="line">        this.$root.foo = 11;    --&gt; 写入根组件 data 中的 foo</span><br><span class="line">        this.$root.bar          --&gt; 读取根组件中的计算属性 bar </span><br><span class="line">        this.$root.baz()        --&gt; 调用根组件中的 baz 方法</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>访问父级组件实例</p><p> 访问父级组件实例通过 <code>$parent</code> 来获取组件实例</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test()&#123; // 子组件中的方法</span><br><span class="line">    // 获取父级组件对象</span><br><span class="line">    this.$parent</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>访问子元素和子组件</p><p> 在 组件标签 和 html标签 中添加 <code>ref</code> 属性。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-com ref=&quot;com&quot;&gt;&lt;/my-com&gt;</span><br><span class="line">&lt;p ref=&quot;p&quot;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><p> 在根组件中, 通过 <code>$refs</code> 获取子组件和子元素</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this.$refs.com   --&gt;  获取 my-com 组件</span><br><span class="line">this.$refs.p     --&gt;  获取 p 标签</span><br></pre></td></tr></table></figure></li></ol><blockquote><p><strong>注意:</strong> 当<code>ref</code> 和<code>v-for</code> 一起使用的时候, 你得到的引用将会是一个包含了对应数据源的子组件 和 标签 的数组。</p></blockquote><blockquote><p><strong>注意:</strong> <code>refs</code> 只会在组件渲染完成之后生效, 并且他们不是响应式的。这仅作为一个用于直接操作子组件的”逃生舱” – 你应该避免在模板或计算属性中访问<code>$ref</code>。</p></blockquote><hr><h2 id="过渡-动画"><a href="#过渡-动画" class="headerlink" title="过渡/动画"></a>过渡/动画</h2><blockquote><p>掌握两组class<br>在<code>v-leave-active</code>,<code>v-enter-active</code>中添加<code>transition</code>, 给<code>v-leave-active</code>,<code>v-enter</code>中添加如何移动,例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.v-leave-active,.v-enter-active&#123;</span><br><span class="line">    transition: all .4s ease;</span><br><span class="line">&#125;</span><br><span class="line">.v-leave-to,.v-enter&#123;</span><br><span class="line">    opacity:0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;组件-下&quot;&gt;&lt;a href=&quot;#组件-下&quot; class=&quot;headerlink&quot; title=&quot;组件-下&quot;&gt;&lt;/a&gt;组件-下&lt;/h1&gt;&lt;h2 id=&quot;vue插槽&quot;&gt;&lt;a href=&quot;#vue插槽&quot; class=&quot;headerlink&quot; title=&quot;vue插槽&quot;&gt;
      
    
    </summary>
    
      <category term="vue框架" scheme="http://yoursite.com/categories/vue%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="vue组件" scheme="http://yoursite.com/tags/vue%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>数据结构线性表-待改进</title>
    <link href="http://yoursite.com/2019/04/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BA%BF%E6%80%A7%E8%A1%A8-%E5%BE%85%E6%94%B9%E8%BF%9B/"/>
    <id>http://yoursite.com/2019/04/15/数据结构线性表-待改进/</id>
    <published>2019-04-15T05:27:58.000Z</published>
    <updated>2019-04-15T06:12:36.313Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
</feed>
