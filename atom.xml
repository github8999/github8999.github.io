<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>生命1昊</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-15T06:12:36.313Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>_日天昊</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构线性表-待改进</title>
    <link href="http://yoursite.com/2019/04/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BA%BF%E6%80%A7%E8%A1%A8-%E5%BE%85%E6%94%B9%E8%BF%9B/"/>
    <id>http://yoursite.com/2019/04/15/数据结构线性表-待改进/</id>
    <published>2019-04-15T05:27:58.000Z</published>
    <updated>2019-04-15T06:12:36.313Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue组件</title>
    <link href="http://yoursite.com/2019/04/15/vue%E7%BB%84%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/04/15/vue组件/</id>
    <published>2019-04-15T02:00:09.000Z</published>
    <updated>2019-04-15T06:12:05.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><p>组件的出现, 就是为了拆分Vue实例的代码量, 能够以不同的组件划分不同的模块, 我们需要什么功能, 就调用什么功能的模块</p><h2 id="为什么需要组件"><a href="#为什么需要组件" class="headerlink" title="为什么需要组件"></a>为什么需要组件</h2><ol><li><p>封装代码, 提高代码的复用性。</p></li><li><p>提高代码的可维护性。</p></li></ol><hr><h2 id="模块化和组件化的区别"><a href="#模块化和组件化的区别" class="headerlink" title="模块化和组件化的区别"></a>模块化和组件化的区别</h2><ol><li><p>模块化是从代码逻辑的角度进行划分的, 方便代码分层开发, 保证每个模块的功能单一, 易扩展易维护。</p></li><li><p>组件化是从ui界面的角度进行划分的, 方便UI组件的重用。</p></li></ol><h2 id="组件的使用"><a href="#组件的使用" class="headerlink" title="组件的使用"></a>组件的使用</h2><h3 id="创建组件模板的三种方式"><a href="#创建组件模板的三种方式" class="headerlink" title="创建组件模板的三种方式"></a>创建组件模板的三种方式</h3><blockquote><p><strong>注意1:</strong> 组件模板中有且只能有一个根节点。</p></blockquote><blockquote><p><strong>注意2:</strong> 在vue实例中组件注册时, 名称使用驼峰式命名, 而在页面中使用组件 标签名对应的驼峰要用 - 隔开。</p></blockquote><blockquote><p><strong>注意3:</strong> 如果额米有使用驼峰式命名可以直接在页面使用该组件名称, 但是一般为了区分原生 html 标签, 组件一般用 - 隔开</p></blockquote><ol><li><p>使用extend创建组件模板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var myCom = Vue.extend(&#123;</span><br><span class="line">    template:&apos;&lt;div&gt; myCom组件 &lt;/div&gt;&apos;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>使用字面量形式创建模板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var myCom = &#123;</span><br><span class="line">    template:&apos;&lt;div&gt; myCom组件 &lt;/div&gt;&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用template标签创建模板</p></li></ol><p>html部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template id=&quot;my-com&quot;&gt;</span><br><span class="line">    &lt;div&gt; myCom组件 &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p><p>js部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var myCom = &#123;</span><br><span class="line">    template:&apos;#my-com&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="组件的使用步骤"><a href="#组件的使用步骤" class="headerlink" title="组件的使用步骤"></a>组件的使用步骤</h3><ol><li><p>创建组件模板对象</p></li><li><p>创建组件,把模板对象注入到组件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- 全局组件</span><br><span class="line">// 模板对象可以直接用字面量创建, 也可以传递一个模板对象</span><br><span class="line">Vue.component(&apos;组件名&apos;,myCom)</span><br><span class="line"></span><br><span class="line">- 私有组件</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    components:&#123;</span><br><span class="line">        mycom</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>把组件注册到实例中</p></li></ol><h3 id="组件中的data"><a href="#组件中的data" class="headerlink" title="组件中的data"></a>组件中的data</h3><blockquote><p>组件中的data是一个方法, 方法内部返回了一个对象; 而vue实例中data 是一个对虾干;</p></blockquote><blockquote><p>多次复用同一个组件, 每个组件中的数据是相互独立的; 原理是每次复用组件,data中的数据都是一个新对象, 因此他们之前的数据互不影响</p></blockquote><blockquote><p>组件中的data在组件中的使用 与 vue实例中的使用方式相同。</p></blockquote><ul><li>组件中的data为什么是个方法返回一个对象: 通过方法返回一个对象来保证复用组件时,保证data中的数据互不影响</li></ul><h3 id="切换组件"><a href="#切换组件" class="headerlink" title="切换组件"></a>切换组件</h3><blockquote><p>使用 <code>&lt;component&gt;</code> 的is 属性, 也可以实现 组件标签的效果,例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-com&gt;  ==&gt; &lt;component is=&quot;myCom / my-com&quot;&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h3><blockquote><p>子组件默认无法访问父组件中 data 中的数据 和 methods 中的方法。</p></blockquote><p><strong>父组件向子组件传值步骤:</strong></p><ol><li><p>在父组件 使用 子组件 的标签上自定义属性,例: <code>&lt;subCom :msg=&quot;msg&quot;&gt;&lt;/subCom&gt;</code></p></li><li><p>在子组件 <code>props</code> 中定义该自定义属性的键名 <code>msg</code>, <code>props:[&#39;msg&#39;]</code>。</p></li></ol><blockquote><p><strong>注意</strong> 标签的属性值部分不区分大小写, 如果自定义属性为 myProp, 则要定义为 myprop,例:<code>&lt;sub-com :mG=msg&gt;&lt;/sub-com&gt;</code> =&gt; <code>props:&#39;mg&#39;</code>, 一般使用 - 隔开</p></blockquote><ul><li><p>props 与 data的区别</p><ul><li><p>props 中的数据, 都是通过父组件传递给子组件的; 子组件中的data数据并不是通过父组件传递过来的, 而是子组件自身私有的。</p></li><li><p>props是单向数据流, 子组件中定义的props直接修改会有报警提示, 但是可以通过.sync修饰符来修改; 而data中的数据是可读可写的。</p></li><li><p>要想控制 props 中的属性值, 可以通过赋值到 data 中来操控。</p></li></ul></li></ul><h3 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h3><blockquote><p>所有的 prop 都会是父子 prop 之间形成一个 <strong>单行向下邦定:</strong> 父级 prop 的更新会向下流到子组件中, 但反过来则不行, 这样会防止从子组件以外改变父级组件的状态, 从而导致你应用的数据的流向难以理解。</p></blockquote><blockquote><p>额外的, <strong>每次父级组件发生更新时, 子组件中所有的 prop 都将刷新为最新的值</strong>。着以为着你不应该在子组件内部改变prop。如果这样做 vue 会在控制台发出警告。</p></blockquote><p>需要改变</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;组件&quot;&gt;&lt;a href=&quot;#组件&quot; class=&quot;headerlink&quot; title=&quot;组件&quot;&gt;&lt;/a&gt;组件&lt;/h1&gt;&lt;p&gt;组件的出现, 就是为了拆分Vue实例的代码量, 能够以不同的组件划分不同的模块, 我们需要什么功能, 就调用什么功能的模块&lt;/p&gt;
&lt;h2 
      
    
    </summary>
    
      <category term="vue框架" scheme="http://yoursite.com/categories/vue%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="vue组件" scheme="http://yoursite.com/tags/vue%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>vue生命周期</title>
    <link href="http://yoursite.com/2019/04/15/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://yoursite.com/2019/04/15/vue生命周期/</id>
    <published>2019-04-15T00:55:51.000Z</published>
    <updated>2019-04-15T01:49:03.260Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h1><h2 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h2><blockquote><p>vue的本质是js文件, 所以他应该会和html文件一起构建成dom树, 然后和css 够成渲染树, beforeMounted 是指把vue中编译成的dom模板挂载到dom树中,mounted 是指把 dom树 挂载到页面中。</p></blockquote><blockquote><p>默认是created 先执行之后再执行watch ,因此在created 中 改变值, 并不会触发 watch, 但是immediate:true 时, 监听器会先执行。</p></blockquote><blockquote><p>由于created 在update执行之前执行,所以在created中赋值 也不会触发update</p></blockquote><hr><h2 id="生命周期相关概念"><a href="#生命周期相关概念" class="headerlink" title="生命周期相关概念"></a>生命周期相关概念</h2><blockquote><p><strong>生命周期:</strong> 指从vue实例创建, 运行到销毁期间。伴随着各式各样的事件, 这些事件统称为生命周期。</p></blockquote><blockquote><p><strong>生命周期钩子:</strong> 指的是声明周期函数的别名; 生命周期钩子 = 生命周期函数 = 生命周期事件</p></blockquote><hr><h2 id="生命周期函数分类"><a href="#生命周期函数分类" class="headerlink" title="生命周期函数分类"></a><strong>生命周期函数分类</strong></h2><h3 id="创建期间-的生命周期钩子"><a href="#创建期间-的生命周期钩子" class="headerlink" title="创建期间 的生命周期钩子"></a><strong>创建期间</strong> 的生命周期钩子</h3><ol><li><p>beforeCreate: 表示刚初始化了一个空的实例, 身上只有一些默认的事件和生命周期函数, 其他的属性和方法都未创建; (在beforeCreate生命周期函数执行的时候, data和methods 中的数据都还没有初始化)</p></li><li><p>created: 这个时候data和methods中数据已经初始化完毕, 如果要使用 data 和 methods 中的数据最早只能在created中操作</p></li><li><p>beforeMount: 这里表示已经把 #app模板 编译完成了(已经挂载到了dom树中) 但是尚未渲染到页面中。此时输出dom节点中的数据仍为 mustache插值</p></li><li><p>mounted: 这里表示已经把dom树, 挂载到页面中去, 用户已经可以看到渲染好的页面了, 这时候 mustache插值 已经被替换为 vue实例中的数据, 此时如果没有别的操作,该实例就静静的在内存中发呆。</p></li></ol><h3 id="运行期间-的生命周期钩子"><a href="#运行期间-的生命周期钩子" class="headerlink" title="运行期间 的生命周期钩子"></a><strong>运行期间</strong> 的生命周期钩子</h3><blockquote><p>运行期间的两个事件, 当data改变的时候会被调用, 有选择的触发0 到n 次;</p></blockquote><ol><li><p>beforeUpdate: 该事件执行的时候, data 中的数据已经改变, 但是尚未渲染到页面中的dom元素中, 这时打印data中的数据,和从 dom中获取的该数据是不一致的。</p></li><li><p>updated: 该事件执行的时候, data中的数据已经改变且已经同步到页面中区了; 这时打印data中的数据和从dom中获取的数据是一致的。</p></li></ol><h3 id="销毁期间-的生命周期钩子"><a href="#销毁期间-的生命周期钩子" class="headerlink" title="销毁期间 的生命周期钩子"></a><strong>销毁期间</strong> 的生命周期钩子</h3><ol><li><p>beforeDestroy: 当调用vm.$destroy() 的时候, 该实例开始被销毁,此时开始调用beforeDestroy, 但是 vue实例 身上基本所有的属性都仍然可用; </p></li><li><p>destroyed: 当对象中所有的内容都已经销毁后,调用destroy生命周期钩子 结束vue 实例的声明。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue生命周期&quot;&gt;&lt;a href=&quot;#vue生命周期&quot; class=&quot;headerlink&quot; title=&quot;vue生命周期&quot;&gt;&lt;/a&gt;vue生命周期&lt;/h1&gt;&lt;h2 id=&quot;个人理解&quot;&gt;&lt;a href=&quot;#个人理解&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="vue框架" scheme="http://yoursite.com/categories/vue%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="vue生命周期" scheme="http://yoursite.com/tags/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>数据结构绪论(待改进)</title>
    <link href="http://yoursite.com/2019/04/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA-%E5%BE%85%E6%94%B9%E8%BF%9B/"/>
    <id>http://yoursite.com/2019/04/14/数据结构绪论-待改进/</id>
    <published>2019-04-14T09:11:19.000Z</published>
    <updated>2019-04-14T09:24:19.349Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="什么是数据结构"><a href="#什么是数据结构" class="headerlink" title="什么是数据结构"></a>什么是数据结构</h2><blockquote><p>程序 = 算法 + 数据结构<br>程序设计的实质,就是对 确定的问题 选择 一种好的结构 加上 一种好的算法。<br>数据结构是算法实现的基础, 算法总是要依赖于某种数据结构来实现<br><a id="more"></a></p></blockquote><h3 id="数据结构概述"><a href="#数据结构概述" class="headerlink" title="数据结构概述"></a>数据结构概述</h3><blockquote><p>1946年情人节，世界上第一台电脑ENIAC在美国宾夕法尼亚大学诞生<br>当时是用来进行计算弹道的, 当时计算机的研制主要用于数值计算。<br>发展到现在,计算机处理的数据也由纯粹的数值,发展到 字符, 表格, 图形, 图像, 声音等非数值的数据。</p></blockquote><h3 id="三种基本数据逻辑结构"><a href="#三种基本数据逻辑结构" class="headerlink" title="三种基本数据逻辑结构"></a>三种基本数据逻辑结构</h3><ul><li><p>线性结构: 一对一</p></li><li><p>树形结构: 一对多</p></li><li><p>图形结构: 多对多</p></li></ul><h2 id="算法概念"><a href="#算法概念" class="headerlink" title="算法概念"></a>算法概念</h2><blockquote><p>算法简单来说就是解决问题的方法。在计算机领域我们可以说算法是有限的指令序列。</p></blockquote><blockquote><p>算法的含义与程序十分相似, 但又有区别。程序中的指令必须是机器可执行的, 而算法中的指令则无此限制。</p></blockquote><blockquote><p>一个算法如果要程序设计语言来描述, 则它就是一个程序。</p></blockquote><h3 id="算法的特性"><a href="#算法的特性" class="headerlink" title="算法的特性"></a>算法的特性</h3><ul><li><p>0个或多个输入: 绝大多数的算法, 输入参数是必要的, 但是也有个别情况, 比如, 仅仅要求输出一段文字</p></li><li><p>至少有一个输出: 输出就是把结果呈现出来, 问题解决了,结果不呈现。有意义吗?</p></li><li><p>有穷性: 一个算法在执行有限步骤后可以呈现。不然会出现死循环</p></li><li><p>确定性: 算法的每一步都必须有确切的意义, 不会出现二义性</p></li><li><p>可行性: 算法中的每一步都是可行的, 每一步都能通过执行有限的次数完成。(也就是指算法可以转换成程序 在机器上运行 并得到正确的结果)</p></li></ul><h3 id="算法要求"><a href="#算法要求" class="headerlink" title="算法要求"></a>算法要求</h3><blockquote><p>一个好的算法应该具备以下四点要求</p></blockquote><ul><li><p>算法要正确: 算法的执行结果应当满足预先规定的功能和性能要求。</p></li><li><p>可读性: <strong>算法首先应该是便于人们理解和相互交流,其次才是机器可执行</strong>。所以一个算法应该思路清晰,层次分明.简单明了,易读易懂。</p></li><li><p>健壮性: 作为一个好的算法,当输入不合法的数据时, 应该适当的做出正确反应或进行相应的处理, 而不至于产生一些莫名其妙的输出结果。</p></li><li><p>高效率低存储: <strong>算法效率通常指算法的执行时间。</strong> 对于同一个问题如果有多个算法可以解决, 执行时间最短的效率最高。所谓存储量的要求,是指算法在执行过程中所产生的的最大存储空间。这两者都与问题的规模有关。</p></li></ul><h3 id="算法的描述"><a href="#算法的描述" class="headerlink" title="算法的描述"></a>算法的描述</h3><p><img src="/2019/04/14/数据结构绪论-待改进/算法的描述.jpg" alt="算法的描述"></p><h3 id="算法评价-算法效率的评价方法"><a href="#算法评价-算法效率的评价方法" class="headerlink" title="算法评价(算法效率的评价方法)"></a>算法评价(算法效率的评价方法)</h3><blockquote><p>少花时间, 少用空间<br>常说的算法效率, 大多指执行时间。</p></blockquote><ul><li>利用计算器,统计运行时间,从而确定算法效率的高低。(这种测试方式有很大的缺陷)</li></ul><ol><li><p>首先要使用算法编制好程序时才能测试算法效率,如果程序存在缺陷就会前功尽弃。</p></li><li><p>时间的比较又依赖于计算机的硬件和软件的坏境因素,有时会遮盖算法本身的优劣。</p></li><li><p>算法的测试数据, 算法的高效有时候和数据的规模有关, 效率高的算法在小规模的测试数据面前往往得不到体现。</p></li></ol><ul><li>估算法</li></ul><p><img src="/2019/04/14/数据结构绪论-待改进/算法效率评价.jpg" alt="算法评价"><br><img src="/2019/04/14/数据结构绪论-待改进/算法效率评价1.jpg" alt="算法评价"><br><img src="/2019/04/14/数据结构绪论-待改进/算法效率评价2.jpg" alt="算法评价"><br><img src="/2019/04/14/数据结构绪论-待改进/算法效率评价3.jpg" alt="算法评价"><br><img src="/2019/04/14/数据结构绪论-待改进/算法效率评价4.jpg" alt="算法评价"><br><img src="/2019/04/14/数据结构绪论-待改进/算法效率评价5.jpg" alt="算法评价"><br><img src="/2019/04/14/数据结构绪论-待改进/算法效率评价6.jpg" alt="算法评价"><br><img src="/2019/04/14/数据结构绪论-待改进/算法效率评价7.jpg" alt="算法评价"><br><img src="/2019/04/14/数据结构绪论-待改进/算法效率评价8.jpg" alt="算法评价"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;headerlink&quot; title=&quot;数据结构&quot;&gt;&lt;/a&gt;数据结构&lt;/h1&gt;&lt;h2 id=&quot;什么是数据结构&quot;&gt;&lt;a href=&quot;#什么是数据结构&quot; class=&quot;headerlink&quot; title=&quot;什么是数据结构&quot;&gt;&lt;/a&gt;什么是数据结构&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;程序 = 算法 + 数据结构&lt;br&gt;程序设计的实质,就是对 确定的问题 选择 一种好的结构 加上 一种好的算法。&lt;br&gt;数据结构是算法实现的基础, 算法总是要依赖于某种数据结构来实现&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法效率评价" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E6%95%88%E7%8E%87%E8%AF%84%E4%BB%B7/"/>
    
  </entry>
  
  <entry>
    <title>vue基础知识</title>
    <link href="http://yoursite.com/2019/04/13/vue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2019/04/13/vue基础知识/</id>
    <published>2019-04-13T14:01:14.000Z</published>
    <updated>2019-04-15T00:52:47.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue框架基础"><a href="#Vue框架基础" class="headerlink" title="Vue框架基础"></a><strong>Vue框架基础</strong></h1><h2 id="vue常见指令"><a href="#vue常见指令" class="headerlink" title="vue常见指令"></a><strong>vue常见指令</strong></h2><h3 id="v-cloak-v-html-v-text处理文本指令"><a href="#v-cloak-v-html-v-text处理文本指令" class="headerlink" title="v-cloak,v-html,v-text处理文本指令"></a><strong>v-cloak,v-html,v-text处理文本指令</strong></h3><ul><li><p><strong>文本闪烁问题:</strong> data中的属性等 会替换对应的 mustache插值 。但是如果没有请求到该数据的时候, mustache插值 会被显示到页面上。等到请求到数据之后页面上的插值表达式才会被 vue实例中的数据替换掉。</p></li><li><p><strong>v-cloak指令:</strong> 该指令会在请求到数据之后移除, 因此可以使用此指令解决文本闪烁问题。 </p></li><li><p><strong>v-html指令:</strong> 该指令类似于innerHTML,会把 v-html指令的值 作用在具有该指令的标签上,具有解析标签的功能。</p></li><li><p><strong>v-text:</strong> 同上述命令,类似于innerText属性。</p></li></ul><h3 id="v-bind指令"><a href="#v-bind指令" class="headerlink" title="v-bind指令:"></a><strong>v-bind指令:</strong></h3><blockquote><p>vue中的指令的属性值部分, 一般都会解析一个合法的JS表达式。但是普通的属性值部分,仍是一个字符串。</p></blockquote><p><strong>v-bind指令</strong> 可以让绑定的属性的值部分,解析一个合法的JS表达式。</p><p><strong>简写:</strong> v-bind: 可以简写为 : 例<code>v-bind:class=&quot;...&quot; ==&gt; :class=&quot;...&quot;</code></p><h3 id="v-on绑定事件指令"><a href="#v-on绑定事件指令" class="headerlink" title="v-on绑定事件指令:"></a><strong>v-on绑定事件指令:</strong></h3><p><strong>v-on指令</strong>用来注册事件,例:<code>onclick ==&gt; v-on:click</code></p><p><strong>简写:</strong> v-on指令 可以简写为 @ ,例: <code>v-on:click ==&gt; @click</code></p><blockquote><p><strong>注意:</strong> vue中事件调用的函数可以加括号也可以不加, js原生的事件中不可以不加括号。</p></blockquote><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a><strong>事件修饰符</strong></h3><ol><li><p><strong>.stop</strong> : 阻止冒泡</p></li><li><p><strong>.prevent</strong> : 阻止默认行为</p></li><li><p><strong>.cupture</strong> : 事件捕获期执行</p></li><li><p><strong>.self</strong> : 事件只作用在该元素本身</p></li><li><p><strong>.once</strong> : 事件只触发一次, 原理是执行完事件之后清除该事件。</p></li></ol><ul><li><p><strong>.stop 与 .self 的区别</strong></p><ul><li><p>self 指事件只作用在自己身上,并不会取消当前元素的冒泡行为。点击子元素不会触发该元素的,但是如果子元素有祖父元素,则会触发祖父元素的事件。</p></li><li><p>stop 阻止当前事件冒泡不会继续往上触发,但是子标签的冒泡会触发到该元素的事件</p></li></ul></li></ul><h3 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a><strong>按键修饰符</strong></h3><blockquote><p>vue内置的按键修饰符</p></blockquote><ul><li><p>.enter </p></li><li><p>.tab</p></li><li><p>.delete (捕获删除和回退键)</p></li><li><p>.esc</p></li><li><p>.space</p></li><li><p>.up</p></li><li><p>.down</p></li><li><p>.left</p></li><li><p>.right</p></li></ul><blockquote><p>没有内置的按键可以通过 Vue.config.keyCodes.按键名 = 按键码来设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.keyCodes.f2 = 123; ==&gt; 自定义按键修饰符</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="修饰符的顺序-存在疑问"><a href="#修饰符的顺序-存在疑问" class="headerlink" title="修饰符的顺序 ???存在疑问"></a><strong>修饰符的顺序</strong> ???存在疑问</h3><blockquote><p>使用多个修饰符的时候, 不同的顺序会有不同的效果, 例: </p></blockquote><h3 id="exact-修饰符"><a href="#exact-修饰符" class="headerlink" title="exact 修饰符"></a><strong>exact 修饰符</strong></h3><blockquote><p>.exact 修饰符允许你控制由精确的系统修饰符组合触发的事件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 即使 Alt 或 Shift 被一同按下时也会触发 --&gt;</span><br><span class="line">&lt;button @click.ctrl=&quot;onClick&quot;&gt;A&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 有且只有 Ctrl 被按下的时候才触发 --&gt;</span><br><span class="line">&lt;button @click.ctrl.exact=&quot;onCtrlClick&quot;&gt;A&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 没有任何系统修饰符被按下的时候才触发 --&gt;</span><br><span class="line">&lt;button @click.exact=&quot;onClick&quot;&gt;A&lt;/button&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a><strong>v-model</strong></h3><blockquote><p>作用随表单元素类型不同而不同<br>现表单输入和vue 实例数据之间的双向绑定。<br>只适用于:<code>&lt;input&gt;</code> <code>&lt;select&gt;</code> <code>&lt;textarea&gt;</code> components</p></blockquote><ul><li><p>修饰符: </p><ul><li><p>.lazy 取代 input 监听 change事件</p></li><li><p>.number 输入字符串转为有效数字</p></li><li><p>.trim 过滤输入字符的首位空格</p></li></ul></li></ul><h3 id="v-bind-应用多个class"><a href="#v-bind-应用多个class" class="headerlink" title="v-bind:应用多个class"></a><strong>v-bind:应用多个class</strong></h3><ul><li><p><strong>数组写法1:</strong> class=”[‘thin’,’red’,’active’]”</p></li><li><p><strong>数组写法2:</strong> class=”[‘thin’,’red’,{active:flag}]”</p></li><li><p><strong>数组写法3:</strong> class=”[‘thin’,’red’,flag?’active’:’’]”</p></li><li><p><strong>对象写法1:</strong> class=”{thin:true , red:true , active:true}”</p></li><li><p><strong>注意:</strong> 没有使用v-bind绑定的class 可以 和绑定的class叠加, 而不是覆盖</p></li></ul><h3 id="v-bind-应用多个style"><a href="#v-bind-应用多个style" class="headerlink" title="v-bind:应用多个style"></a><strong>v-bind:应用多个style</strong></h3><ul><li><p><strong>数组写法:</strong> style=”[{color:’red’}{‘font-size’:’20px’}]”</p></li><li><p><strong>对象写法:</strong> style=”{color:’red’,fontSize:’20px’}”</p></li></ul><blockquote><p><strong>注意:</strong> 如果属性名直接写成font-size 的形式要加引号,如果写成驼峰命名的形式可以不加引号</p></blockquote><h3 id="v-for遍历的四种方法"><a href="#v-for遍历的四种方法" class="headerlink" title="v-for遍历的四种方法"></a><strong>v-for遍历的四种方法</strong></h3><ol><li><p><strong>遍历数组</strong> <code>v-for=&quot;(item,index) in arr&quot;</code></p></li><li><p><strong>遍历数组对象</strong> <code>v-for=&quot;(user,index) in userArr&quot;</code></p></li><li><p><strong>遍历对象</strong> <code>v-for=&quot;(val,key,index) in users&quot;</code></p><blockquote><p><strong>注意：</strong> 值在前，键在后，对象是无序排列不建议使用index</p></blockquote></li><li><p><strong>遍历数字</strong> <code>v-for=&quot;(count,index) in 10&quot;</code></p><blockquote><p><strong>注意:</strong> 遍历数字下标从0开始, 但是元素是从1开始</p></blockquote></li></ol><h3 id="key"><a href="#key" class="headerlink" title="key"></a><strong>key</strong></h3><p><code>key</code> 用来确保遍历数据的唯一性, 例: 如果使用v-for遍历数组的时候, 向数组的前面添加了一个元素, 如果第i个身上绑定了数据, 由于vue组件高度复用的特性, 那么在前面添加了一个元素之后, 可能数据会按照索引绑定到前面的一个身上</p><blockquote><p><strong>注意:</strong> key值只能是 Number 和String类型</p></blockquote><h3 id="v-if-和-v-show"><a href="#v-if-和-v-show" class="headerlink" title="v-if 和 v-show"></a><strong>v-if 和 v-show</strong></h3><ul><li><p><strong>v-if, v-else-if, v-else</strong> v-if 每次都会删除或创建元素, 消耗很大的切换性能, 如果元素频繁切换, 建议使用v-show</p></li><li><p><strong>v-show, v-hide</strong> v-show 操作元素的display:nona/block, 有较高的初始渲染消耗, 如果元素很少显示出来 被用户看到推荐用v-if</p></li></ul><hr><h2 id="data"><a href="#data" class="headerlink" title="data"></a>data</h2><blockquote><p>vue 中的数据 在vue的控制区域都可以使用</p></blockquote><ol><li><p>如果修改了data中的数据, 会自动渲染到页面上</p></li><li><p><strong>数组的不可检测问题:</strong> </p></li></ol><p><strong>问题1:</strong> 如果使用length属性清空data中的数据, vue不会检测到, 因此也不会同步到页面上<br><strong>解决方法:</strong> 不使用length属性 让数组等于空数组, 而不是让length等于0;</p><p><strong>问题2:</strong> 使用数据的索引下标修改值, 也不会同步到页面上, vue不能检测<br><strong>解决方法1:</strong> 使用splice方法替换掉要修改下标的元素<br><strong>解决方法2:</strong> 使用vue 的强制响应方法 Vue.set(vue.item ,index, newVal)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue框架基础&quot;&gt;&lt;a href=&quot;#Vue框架基础&quot; class=&quot;headerlink&quot; title=&quot;Vue框架基础&quot;&gt;&lt;/a&gt;&lt;strong&gt;Vue框架基础&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;vue常见指令&quot;&gt;&lt;a href=&quot;#vue常见指令&quot; 
      
    
    </summary>
    
      <category term="vue框架" scheme="http://yoursite.com/categories/vue%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>flex布局</title>
    <link href="http://yoursite.com/2019/04/12/flex%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2019/04/12/flex布局/</id>
    <published>2019-04-12T13:46:23.000Z</published>
    <updated>2019-04-14T09:25:35.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flex-布局"><a href="#Flex-布局" class="headerlink" title="Flex 布局"></a>Flex 布局</h1><blockquote><p><strong>网页布局</strong> (layout) 是 CSS 的一个重点应用。布局的传统解决方法, 基于盒状模型(margin,padding…), 依赖display 属性 + position 属性 + float 属性。紧紧是垂直居中就不容易实现。</p></blockquote><blockquote><p><strong>flex布局</strong> Flex布局将成为未来布局的首选方案。<br><a id="more"></a></p></blockquote><h2 id="一、什么是Flex布局"><a href="#一、什么是Flex布局" class="headerlink" title="一、什么是Flex布局:"></a>一、什么是Flex布局:</h2><blockquote><p>设为flex布局以后, 子元素的float, clear, vertical-align属性将失效</p></blockquote><p>任何一个容器都可以指定为flex布局<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">    display:flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>行内元素也可以使用Flex布局<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">    display:inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Webkit 内核的浏览器，必须要加上 -webkit 前缀<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">    display: -webkit-flex; /* safari */</span><br><span class="line">    display: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h2><blockquote><p>采用Flex布局的元素, 成为Flex 容器(flex container), 简称 “容器”。它的所有子元素都会自动成为容器成员, 成为Flex 项目(flex item), 简称 “项目”。</p></blockquote><blockquote><p>容器默认存在两根轴：水平方向的轴（main axis）和垂直的交叉轴（cross axis）。主轴开始位置与边框的交叉点叫做 main start，结束为止叫做 main end；交叉轴的开始位置叫做 cross start，结束位置叫做cross end。</p></blockquote><blockquote><p>项目默认沿主轴排列。单个项目占据主轴空间叫做 main size，占据的交叉轴空间叫做cross size。</p></blockquote><p><img src="/2019/04/12/flex布局/容器结构.jpg" alt="容器结构"></p><hr><h2 id="三、容器的属性"><a href="#三、容器的属性" class="headerlink" title="三、容器的属性"></a>三、容器的属性</h2><ul><li><p>flex-direction</p></li><li><p>flex-wrap</p></li><li><p>flex-flow</p></li><li><p>justify-content</p></li><li><p>align-items</p></li><li><p>align-content</p></li></ul><h3 id="3-1-flex-direction-属性"><a href="#3-1-flex-direction-属性" class="headerlink" title="3.1 flex-direction 属性"></a>3.1 flex-direction 属性</h3><p>flex-direction 属性决定主轴的方向(即项目排列的方向)</p><p><img src="/2019/04/12/flex布局/flex-direction属性.jpg" alt="flex-direction属性"></p><p>它可能有四个值:</p><ul><li><p>row(默认值) :主轴位水平方向, 起点在左端</p></li><li><p>row-reverse :主轴在水平方向, 起点在右端</p></li><li><p>column :主轴在垂直方式, 起点在上端</p></li><li><p>column-reverse :主轴在垂直方式, 起点在下端</p></li></ul><h3 id="3-2-flex-wrap"><a href="#3-2-flex-wrap" class="headerlink" title="3.2 flex-wrap"></a>3.2 flex-wrap</h3><p>默认情况下,项目都排在一条线(又称 轴线 )上。 flex-wrap 属性定义, 如果一条线排不下,如何换行。</p><p>它可能取三个值</p><ul><li>nowrap (默认) 不换行: 会挤压盒子的宽高; </li></ul><p><img src="/2019/04/12/flex布局/不换行.jpg" alt="不换行"></p><ul><li>wrap 换行, 多余的往下排</li></ul><p><img src="/2019/04/12/flex布局/wrap.jpg" alt="wrap"></p><ul><li>wrap-reverse 换行, 但是多余的往上排</li></ul><p><img src="/2019/04/12/flex布局/wrap-reverse.jpg" alt="wrap-reverse"></p><h3 id="3-3-flex-flow属性"><a href="#3-3-flex-flow属性" class="headerlink" title="3.3 flex-flow属性"></a>3.3 flex-flow属性</h3><p>flex-flow属性 是对 flex-direction属性 和 flex-wrap属性 的简写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flex-flow: flex-direction || flex-wrap</span><br></pre></td></tr></table></figure></p><h3 id="3-4-justify-content"><a href="#3-4-justify-content" class="headerlink" title="3.4 justify-content"></a>3.4 justify-content</h3><p>justify-content 属性 定义了项目在主轴上的对齐方式</p><ul><li><p>flex-start 从start向end排列, 类似于flex-direction:row;</p></li><li><p>flex-end 从end向start排列, 类似于flex-direction: row-reverse;</p></li><li><p>center 项目居中</p></li><li><p>space-between 两侧紧贴, 项目之间的间隔都相等</p></li><li><p>space-around 项目之间的间隔都相等。所以项目之间的间隔比项目与边框之间的间隔大一倍。</p></li></ul><p><img src="/2019/04/12/flex布局/justify-content.jpg" alt="justify-content.jpg"></p><h3 id="3-5-align-item-属性"><a href="#3-5-align-item-属性" class="headerlink" title="3.5 align-item 属性"></a>3.5 align-item 属性</h3><p>align-item 属性, 定义项目在交叉轴上如何对齐</p><ul><li><p>flex-start, 从交叉轴的start开始向下排列 的start</p></li><li><p>flex-end, 交叉轴的终点对齐。</p></li><li><p>center, 交叉轴的中点对齐</p></li><li><p>baseline, 项目中第一行文字的基线对齐</p></li><li><p>stretch, 如果项目未设置高度或者 auto, 将沾满整个容器的高度。</p></li></ul><h3 id="3-6-align-content属性"><a href="#3-6-align-content属性" class="headerlink" title="3.6 align-content属性"></a>3.6 align-content属性</h3><p>align-content属性定义了主轴方向上多条轴线时, 项目子在交叉轴方向上的对齐方式</p><ul><li><p>flex-start, 从交叉轴的</p></li><li><p>flex-end</p></li><li><p>center</p></li><li><p>space-between</p></li><li><p>space-around</p></li><li><p>stretch</p></li></ul><p><img src="/2019/04/12/flex布局/align-content.png" alt="align-content"></p><hr><h2 id="四、项目属性"><a href="#四、项目属性" class="headerlink" title="四、项目属性"></a>四、项目属性</h2><ul><li><p>order</p></li><li><p>flex-grow</p></li><li><p>flex-shrink</p></li><li><p>flex-basis</p></li><li><p>flex</p></li><li><p>align-self</p></li></ul><h3 id="4-1-order-属性"><a href="#4-1-order-属性" class="headerlink" title="4.1 order 属性"></a>4.1 order 属性</h3><p><code>order</code>属性定义项目的排列顺序。项目越小排列越靠前,默认为0;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例：order: &lt;int&gt;</span><br></pre></td></tr></table></figure></p><p><img src="/2019/04/12/flex布局/order.jpg" alt="order"></p><h3 id="4-2-flex-grow属性"><a href="#4-2-flex-grow属性" class="headerlink" title="4.2 flex-grow属性"></a>4.2 flex-grow属性</h3><blockquote><p>如果所有项目都为1的话, 它们将等分项目空间, 如果有一个项目为2, 其余项目为1的话, 则前者占据剩余空间将比其他项目多一倍。</p></blockquote><p><code>flex-grow</code>属性 定义项目的放大比例, 如果容易中有足够大的空间, 会结合比例进行放大。默认为0 ,即有足够的空间也不放大。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flex-grow:&lt;int&gt;</span><br></pre></td></tr></table></figure><h3 id="4-3-flex-shrink-属性"><a href="#4-3-flex-shrink-属性" class="headerlink" title="4.3 flex-shrink 属性"></a>4.3 flex-shrink 属性</h3><blockquote><p>如果所有项目为1, 当容器空间不足时,都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为0, 其他都为1 ,当容器空间不足, 其他都缩小时, 它不变。</p></blockquote><blockquote><p>负值对该属性无效。</p></blockquote><p><code>flex-shrink</code> 属性定义了项目的缩小比例,默认为1, 如果容器空间不如, 该项目将缩小。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flex-shrink:&lt;int&gt;</span><br></pre></td></tr></table></figure><h3 id="4-4-flex-basis-属性"><a href="#4-4-flex-basis-属性" class="headerlink" title="4.4 flex-basis 属性"></a>4.4 flex-basis 属性</h3><p><code>flex-basis</code>属性定义了在分配多余空间之前, 项目占据主轴空间(main size)。浏览器根据这个属性,计算主轴是否有多余空间。它的默认值为auto, 即项目的本来大小。</p><blockquote><p>该属性如果设置成数值, 将占据固定空间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flex-basis: 数值||auto;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="4-5-flex属性"><a href="#4-5-flex属性" class="headerlink" title="4.5 flex属性"></a>4.5 flex属性</h3><p><code>flex</code> 属性是 <code>flex-grow</code>,<code>flex-shrink</code>,<code>flex-basis</code>的简写, 默认值为<code>0 1 auto</code>。后两个属性可选。 </p><blockquote><p>该属性有两个快捷值, auto ==&gt; ( 1 1 auto ), none ==&gt; ( 0 0 auto )</p></blockquote><blockquote><p>建议有限使用这个属性, 而不是分开使用 <code>flex-grow</code> <code>flex-shrink</code>和 <code>flex-basis</code>, 因为浏览器会推算默认值。</p></blockquote><h3 id="4-6-align-self属性"><a href="#4-6-align-self属性" class="headerlink" title="4.6 align-self属性"></a>4.6 align-self属性</h3><p><code>align-self</code> 属性允许单个项目有与其他项目不同的对齐方式, 可以覆盖<code>align-item</code> 属性。默认值为<code>auto</code>, 表示继承父元素的<code>align-item属性</code>,如果没有,则等同于stretch</p><blockquote><p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p></blockquote><p><img src="/2019/04/12/flex布局/align-self.jpg" alt="align-self"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Flex-布局&quot;&gt;&lt;a href=&quot;#Flex-布局&quot; class=&quot;headerlink&quot; title=&quot;Flex 布局&quot;&gt;&lt;/a&gt;Flex 布局&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;网页布局&lt;/strong&gt; (layout) 是 CSS 的一个重点应用。布局的传统解决方法, 基于盒状模型(margin,padding…), 依赖display 属性 + position 属性 + float 属性。紧紧是垂直居中就不容易实现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;flex布局&lt;/strong&gt; Flex布局将成为未来布局的首选方案。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
      <category term="flex" scheme="http://yoursite.com/tags/flex/"/>
    
  </entry>
  
</feed>
